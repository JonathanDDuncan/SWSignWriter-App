{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Fernando Martinez/Documents/Programacion/SignWriter/Frontend JD/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Storage } from '@ionic/storage';\nimport { JWTService } from './services/jwt.service';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/storage\";\nimport * as i2 from \"./services/jwt.service\";\nimport * as i3 from \"@angular/common/http\";\nexport class StorageService {\n  constructor(storage, jwtService, http) {\n    this.storage = storage;\n    this.jwtService = jwtService;\n    this.http = http;\n    this.puddleskey = 'puddles';\n    this.defaultkey = 'default';\n    this.uiLanguagekey = 'uiLanguage';\n    this.userCurrentProfilekey = 'userCurrentProfile';\n    this.firstTimekey = 'firstTime';\n    this.serverUrl = \"https://swsignwriterapi.azurewebsites.net/\";\n  }\n\n  puddlesExists() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const puddles = yield _this.storage.get(_this.puddleskey);\n\n      if (puddles) {\n        return true;\n      } else {\n        return false;\n      }\n    })();\n  }\n\n  savePuddle(puddlename, result) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.storage.set(puddlename, result);\n      const name = result.puddleInfo.puddleName; // Save to list of existing puddles\n\n      yield _this2.savePuddleName(puddlename);\n      return {\n        name: name,\n        puddlename: puddlename,\n        entries: result.entries.length\n      };\n    })();\n  }\n\n  savePuddleName(puddlename) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let puddles = yield _this3.storage.get(_this3.puddleskey);\n\n      if (!puddles) {\n        puddles = [];\n      }\n\n      if (!puddles.includes(puddlename)) {\n        puddles.push(puddlename);\n        yield _this3.storage.set(_this3.puddleskey, puddles);\n      }\n\n      return;\n    })();\n  }\n\n  setDefaultPuddleLoaded(defaultPuddle) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this4.storage.set(_this4.defaultkey, defaultPuddle);\n    })();\n  }\n\n  getDefaultPuddleLoaded() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this5.storage.get(_this5.defaultkey);\n    })();\n  }\n\n  removeDefaultPuddles() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const defaultPuddle = yield _this6.getDefaultPuddleLoaded();\n\n      if (defaultPuddle) {\n        yield _this6.removeAllPuddles();\n      }\n\n      return;\n    })();\n  }\n\n  removeAllPuddles() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this7.storage.get(_this7.puddleskey).then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (puddles) {\n          if (puddles) {\n            puddles.forEach( /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator(function* (puddle) {\n                if (puddle && puddle.startsWith('puddle_')) {\n                  yield _this7.storage.remove(puddle);\n                }\n              });\n\n              return function (_x2) {\n                return _ref2.apply(this, arguments);\n              };\n            }());\n            yield _this7.storage.remove(_this7.puddleskey);\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n\n  saveUILanguage(language) {\n    this.storage.set(this.uiLanguagekey, language);\n  }\n\n  getUILanguage() {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this8.storage.get(_this8.uiLanguagekey);\n    })();\n  }\n\n  SaveCurrentUserProfile(token) {\n    // Save locally  \n    this.storage.set(this.userCurrentProfilekey, this.convertTokenToUserProfile(token)); // Save in DB\n\n    this.SaveUserDB(token);\n  }\n\n  RemoveCurrentUserProfile() {\n    this.storage.remove(this.userCurrentProfilekey);\n  }\n\n  SaveUserDB(token) {\n    var verifiedJWT = this.jwtService.getSignatureVerifyResult(token.__raw);\n\n    if (verifiedJWT) {\n      const options = {\n        headers: new HttpHeaders().append('Accept', 'application/json').append('Content-Type', 'application/json'),\n        params: new HttpParams().append('token', token.__raw)\n      };\n      this.http.post(this.serverUrl + 'api/Users/SaveUser', {}, options).subscribe(response => console.log('response', response));\n    }\n  }\n\n  GetCurrentUserProfile() {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      console.log(_this9.userCurrentProfilekey);\n      return yield _this9.storage.get(_this9.userCurrentProfilekey);\n    })();\n  }\n\n  getFirstTime() {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        return yield _this10.storage.get(_this10.firstTimekey);\n      } catch (_a) {\n        return true;\n      }\n    })();\n  }\n\n  saveFirstTime() {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this11.storage.set(_this11.firstTimekey, false);\n    })();\n  }\n\n  SaveSubscription(email, endDate, cancelatperiodend) {\n    const key = this.Obfuscate(email + 'subscriptionEndDate');\n    const subscription = this.Obfuscate(JSON.stringify({\n      endDate: endDate,\n      cancelatperiodend: cancelatperiodend\n    }));\n    this.storage.set(key, subscription);\n  }\n\n  GetSubscription(email) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      const key = _this12.Obfuscate(email + 'subscriptionEndDate');\n\n      const value = yield _this12.storage.get(key);\n      let subscription;\n\n      if (value) {\n        const cleaned = _this12.Clean(value);\n\n        subscription = JSON.parse(atob(cleaned));\n      }\n\n      return subscription;\n    })();\n  }\n\n  Clean(value) {\n    if (value) {\n      const stripped = value.replace(/[^A-Za-z0-9+-]/g, '');\n      return stripped;\n    }\n\n    return null;\n  }\n\n  Obfuscate(str) {\n    let obf1 = '%%' + btoa(str) + '%%';\n    const insert = ['!', '\"', '#', '$', '%', '&', '(', ')', '*'];\n    let count = 0;\n\n    for (let index = 0; index < obf1.length; index++) {\n      const element = obf1[index];\n\n      if (index % 5 === 0) {\n        count = count > 8 ? 0 : count;\n        obf1 = this.InsertChar(obf1, insert[count], index);\n      }\n    }\n\n    return obf1;\n  }\n\n  InsertChar(a, b, index) {\n    return a.substr(0, index) + b + a.substr(index);\n  }\n\n  GetTrialStartDate(email) {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      const key = _this13.Obfuscate(email + 'trialStartDate');\n\n      const value = yield _this13.storage.get(key);\n      const cleaned = atob(_this13.Clean(value));\n\n      if (cleaned && cleaned !== 'ée') {\n        const endDate = new Date(cleaned);\n        return endDate;\n      } else {\n        return null;\n      }\n    })();\n  }\n\n  SaveTrialStartDate(email, startDate) {\n    const key = this.Obfuscate(email + 'trialStartDate');\n    const date = this.Obfuscate(startDate.toString());\n    this.storage.set(key, date);\n  }\n\n  convertTokenToUserProfile(token) {\n    return {\n      email: token.email,\n      email_verified: token.email_verified,\n      family_name: token.family_name,\n      given_name: token.given_name,\n      locale: token.locale,\n      name: token.name,\n      nickname: token.nickname,\n      picture: token.picture,\n      sub: token.sub,\n      updated_at: token.updated_at\n    };\n  }\n\n}\n\nStorageService.ɵfac = function StorageService_Factory(t) {\n  return new (t || StorageService)(i0.ɵɵinject(i1.Storage), i0.ɵɵinject(i2.JWTService), i0.ɵɵinject(i3.HttpClient));\n};\n\nStorageService.ɵprov = i0.ɵɵdefineInjectable({\n  token: StorageService,\n  factory: StorageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\Users\\Fernando Martinez\\Documents\\Programacion\\SignWriter\\Frontend JD\\src\\app\\storage.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { UserProfile } from './user/user-profile';\r\nimport { Injectable } from '@angular/core';\r\nimport { Storage } from '@ionic/storage';\r\nimport { Puddle } from './spml.service';\r\nimport { JWTService } from './services/jwt.service';\r\nimport { HttpClient, HttpHeaders, HttpParams  } from '@angular/common/http';\r\nimport { IdToken } from '@auth0/auth0-spa-js';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StorageService {\r\n\r\n\r\n  private puddleskey = 'puddles';\r\n  private defaultkey = 'default';\r\n  private uiLanguagekey = 'uiLanguage';\r\n  private userCurrentProfilekey = 'userCurrentProfile';\r\n  private firstTimekey = 'firstTime';\r\n  private serverUrl = \"https://swsignwriterapi.azurewebsites.net/\";\r\n\r\n  constructor(private storage: Storage, \r\n    private jwtService: JWTService,\r\n    private http: HttpClient) { }\r\n\r\n  async puddlesExists(): Promise<boolean> {\r\n    const puddles = await this.storage.get(this.puddleskey);\r\n\r\n    if (puddles) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async savePuddle(puddlename: string, result: Puddle): Promise<{name: string, puddlename: string, entries: number }> {\r\n    await this.storage.set(puddlename, result);\r\n    const name = result.puddleInfo.puddleName;\r\n    // Save to list of existing puddles\r\n    await this.savePuddleName(puddlename);\r\n    return { name: name, puddlename: puddlename, entries: result.entries.length };\r\n  }\r\n\r\n  private async savePuddleName(puddlename: string): Promise<void> {\r\n    let puddles = await this.storage.get(this.puddleskey);\r\n\r\n    if (!puddles) {\r\n      puddles = [];\r\n    }\r\n    if (!puddles.includes(puddlename)) {\r\n      puddles.push(puddlename);\r\n      await this.storage.set(this.puddleskey, puddles);\r\n    }\r\n    return;\r\n  }\r\n\r\n  async setDefaultPuddleLoaded(defaultPuddle: boolean): Promise<any> {\r\n    return await this.storage.set(this.defaultkey, defaultPuddle);\r\n  }\r\n\r\n  async getDefaultPuddleLoaded(): Promise<string> {\r\n    return await this.storage.get(this.defaultkey);\r\n  }\r\n\r\n  async removeDefaultPuddles(): Promise<void> {\r\n    const defaultPuddle = await this.getDefaultPuddleLoaded();\r\n    if (defaultPuddle) {\r\n      await this.removeAllPuddles();\r\n    }\r\n    return;\r\n  }\r\n\r\n  async removeAllPuddles() {\r\n    await this.storage.get(this.puddleskey).then(async (puddles: string[]) => {\r\n      if (puddles) {\r\n        puddles.forEach(async (puddle: string) => {\r\n          if (puddle && puddle.startsWith('puddle_')) {\r\n            await this.storage.remove(puddle);\r\n          }\r\n        });\r\n        await this.storage.remove(this.puddleskey);\r\n      }\r\n    });\r\n  }\r\n\r\n  saveUILanguage(language: string) {\r\n    this.storage.set(this.uiLanguagekey, language);\r\n  }\r\n\r\n  async getUILanguage(): Promise<string> {\r\n    return await this.storage.get(this.uiLanguagekey);\r\n  }\r\n\r\n  SaveCurrentUserProfile(token: IdToken) {\r\n    // Save locally  \r\n    this.storage.set(this.userCurrentProfilekey, this.convertTokenToUserProfile(token));\r\n\r\n    // Save in DB\r\n    this.SaveUserDB(token);\r\n\r\n  }\r\n\r\n  RemoveCurrentUserProfile() {  \r\n    this.storage.remove(this.userCurrentProfilekey);\r\n  }\r\n\r\n  SaveUserDB(token: IdToken){\r\n    var verifiedJWT = this.jwtService.getSignatureVerifyResult(token.__raw);\r\n    \r\n    if(verifiedJWT){           \r\n      \r\n        const options = {\r\n          headers: new HttpHeaders().append('Accept', 'application/json').append('Content-Type', 'application/json'),\r\n          params: new HttpParams().append('token', token.__raw)\r\n        }        \r\n\r\n      this.http.post(this.serverUrl + 'api/Users/SaveUser', { }, options)\r\n      .subscribe(response => console.log('response', response));    \r\n    }   \r\n  }\r\n\r\n  async GetCurrentUserProfile(): Promise<UserProfile> {\r\n    console.log(this.userCurrentProfilekey);\r\n    return await this.storage.get(this.userCurrentProfilekey);\r\n  }\r\n\r\n  async getFirstTime(): Promise<boolean> {\r\n    try {\r\n      return await this.storage.get(this.firstTimekey);\r\n    } catch {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  async saveFirstTime() {\r\n    await this.storage.set(this.firstTimekey, false);\r\n  }\r\n\r\n  SaveSubscription(email: string, endDate: Date, cancelatperiodend: boolean): void {\r\n    const key = this.Obfuscate(email + 'subscriptionEndDate');\r\n    const subscription = this.Obfuscate( JSON.stringify({ endDate: endDate, cancelatperiodend: cancelatperiodend}) );\r\n    this.storage.set(key, subscription);\r\n  }\r\n\r\n  async GetSubscription(email: string): Promise<{endDate: Date, cancelatperiodend: boolean }> {\r\n    const key = this.Obfuscate(email + 'subscriptionEndDate');\r\n    const value = await this.storage.get(key);\r\n    let subscription: {endDate: Date, cancelatperiodend: boolean };\r\n    if (value) {\r\n      const cleaned = this.Clean(value);\r\n      subscription  = JSON.parse(atob(cleaned));\r\n    }\r\n    return subscription;\r\n  }\r\n\r\n  Clean(value: string): string {\r\n    if (value) {\r\n      const stripped = value.replace(/[^A-Za-z0-9+-]/g, '');\r\n      return stripped;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  Obfuscate(str: string): string {\r\n    let obf1 = '%%' + btoa(str) + '%%';\r\n    const insert = ['!', '\"', '#', '$', '%', '&', '(', ')', '*'];\r\n    let count = 0;\r\n    for (let index = 0; index < obf1.length; index++) {\r\n      const element = obf1[index];\r\n      if (index % 5 === 0) {\r\n        count = count > 8 ? 0 : count;\r\n        obf1 = this.InsertChar(obf1, insert[count], index);\r\n      }\r\n    }\r\n    return obf1;\r\n  }\r\n\r\n  InsertChar(a: string, b: string, index: number): string {\r\n    return a.substr(0, index) + b + a.substr(index);\r\n  }\r\n\r\n  async GetTrialStartDate(email: string) {\r\n    const key = this.Obfuscate(email + 'trialStartDate');\r\n    const value = await this.storage.get(key);\r\n    const cleaned = atob(this.Clean(value));\r\n\r\n    if (cleaned && cleaned !== 'ée') {\r\n      const endDate = new Date(cleaned);\r\n      return endDate;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  SaveTrialStartDate(email: string, startDate: Date): void {\r\n    const key = this.Obfuscate(email + 'trialStartDate');\r\n    const date = this.Obfuscate(startDate.toString());\r\n    this.storage.set(key, date);\r\n  }\r\n\r\n  convertTokenToUserProfile (token : IdToken): UserProfile {\r\n    return {\r\n      email: token.email,\r\n      email_verified: token.email_verified,\r\n      family_name: token.family_name,\r\n      given_name: token.given_name,\r\n      locale: token.locale,\r\n      name: token.name,\r\n      nickname: token.nickname,\r\n      picture: token.picture,\r\n      sub: token.sub,\r\n      updated_at: token.updated_at\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
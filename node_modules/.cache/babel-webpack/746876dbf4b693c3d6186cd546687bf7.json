{"ast":null,"code":"import { __assign, __values } from \"tslib\";\n/* eslint-disable max-lines */\n\nimport { Scope } from '@sentry/hub';\nimport { SessionStatus } from '@sentry/types';\nimport { dateTimestampInSeconds, Dsn, isPrimitive, isThenable, logger, normalize, SentryError, SyncPromise, truncate, uuid4 } from '@sentry/utils';\nimport { setupIntegrations } from './integration';\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient.prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\n\nvar BaseClient =\n/** @class */\nfunction () {\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  function BaseClient(backendClass, options) {\n    /** Array of used integrations. */\n    this._integrations = {};\n    /** Number of call being processed */\n\n    this._processing = 0;\n    this._backend = new backendClass(options);\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = new Dsn(options.dsn);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n\n\n  BaseClient.prototype.captureException = function (exception, hint, scope) {\n    var _this = this;\n\n    var eventId = hint && hint.event_id;\n\n    this._process(this._getBackend().eventFromException(exception, hint).then(function (event) {\n      return _this._captureEvent(event, hint, scope);\n    }).then(function (result) {\n      eventId = result;\n    }));\n\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.captureMessage = function (message, level, hint, scope) {\n    var _this = this;\n\n    var eventId = hint && hint.event_id;\n    var promisedEvent = isPrimitive(message) ? this._getBackend().eventFromMessage(String(message), level, hint) : this._getBackend().eventFromException(message, hint);\n\n    this._process(promisedEvent.then(function (event) {\n      return _this._captureEvent(event, hint, scope);\n    }).then(function (result) {\n      eventId = result;\n    }));\n\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.captureEvent = function (event, hint, scope) {\n    var eventId = hint && hint.event_id;\n\n    this._process(this._captureEvent(event, hint, scope).then(function (result) {\n      eventId = result;\n    }));\n\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.captureSession = function (session) {\n    if (!session.release) {\n      logger.warn('Discarded session because of missing release');\n    } else {\n      this._sendSession(session);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.getDsn = function () {\n    return this._dsn;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.getOptions = function () {\n    return this._options;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.flush = function (timeout) {\n    var _this = this;\n\n    return this._isClientProcessing(timeout).then(function (ready) {\n      return _this._getBackend().getTransport().close(timeout).then(function (transportFlushed) {\n        return ready && transportFlushed;\n      });\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.close = function (timeout) {\n    var _this = this;\n\n    return this.flush(timeout).then(function (result) {\n      _this.getOptions().enabled = false;\n      return result;\n    });\n  };\n  /**\n   * Sets up the integrations\n   */\n\n\n  BaseClient.prototype.setupIntegrations = function () {\n    if (this._isEnabled()) {\n      this._integrations = setupIntegrations(this._options);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.getIntegration = function (integration) {\n    try {\n      return this._integrations[integration.id] || null;\n    } catch (_oO) {\n      logger.warn(\"Cannot retrieve integration \" + integration.id + \" from the current Client\");\n      return null;\n    }\n  };\n  /** Updates existing session based on the provided event */\n\n\n  BaseClient.prototype._updateSessionFromEvent = function (session, event) {\n    var e_1, _a;\n\n    var crashed = false;\n    var errored = false;\n    var userAgent;\n    var exceptions = event.exception && event.exception.values;\n\n    if (exceptions) {\n      errored = true;\n\n      try {\n        for (var exceptions_1 = __values(exceptions), exceptions_1_1 = exceptions_1.next(); !exceptions_1_1.done; exceptions_1_1 = exceptions_1.next()) {\n          var ex = exceptions_1_1.value;\n          var mechanism = ex.mechanism;\n\n          if (mechanism && mechanism.handled === false) {\n            crashed = true;\n            break;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (exceptions_1_1 && !exceptions_1_1.done && (_a = exceptions_1.return)) _a.call(exceptions_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n\n    var user = event.user;\n\n    if (!session.userAgent) {\n      var headers = event.request ? event.request.headers : {};\n\n      for (var key in headers) {\n        if (key.toLowerCase() === 'user-agent') {\n          userAgent = headers[key];\n          break;\n        }\n      }\n    }\n\n    session.update(__assign(__assign({}, crashed && {\n      status: SessionStatus.Crashed\n    }), {\n      user: user,\n      userAgent: userAgent,\n      errors: session.errors + Number(errored || crashed)\n    }));\n  };\n  /** Deliver captured session to Sentry */\n\n\n  BaseClient.prototype._sendSession = function (session) {\n    this._getBackend().sendSession(session);\n  };\n  /** Waits for the client to be done with processing. */\n\n\n  BaseClient.prototype._isClientProcessing = function (timeout) {\n    var _this = this;\n\n    return new SyncPromise(function (resolve) {\n      var ticked = 0;\n      var tick = 1;\n      var interval = setInterval(function () {\n        if (_this._processing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  };\n  /** Returns the current backend. */\n\n\n  BaseClient.prototype._getBackend = function () {\n    return this._backend;\n  };\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n\n\n  BaseClient.prototype._isEnabled = function () {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  };\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n\n\n  BaseClient.prototype._prepareEvent = function (event, scope, hint) {\n    var _this = this;\n\n    var _a = this.getOptions().normalizeDepth,\n        normalizeDepth = _a === void 0 ? 3 : _a;\n\n    var prepared = __assign(__assign({}, event), {\n      event_id: event.event_id || (hint && hint.event_id ? hint.event_id : uuid4()),\n      timestamp: event.timestamp || dateTimestampInSeconds()\n    });\n\n    this._applyClientOptions(prepared);\n\n    this._applyIntegrationsMetadata(prepared); // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n\n\n    var finalScope = scope;\n\n    if (hint && hint.captureContext) {\n      finalScope = Scope.clone(finalScope).update(hint.captureContext);\n    } // We prepare the result here with a resolved Event.\n\n\n    var result = SyncPromise.resolve(prepared); // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n\n    if (finalScope) {\n      // In case we have a hub we reassign it.\n      result = finalScope.applyToEvent(prepared, hint);\n    }\n\n    return result.then(function (evt) {\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return _this._normalizeEvent(evt, normalizeDepth);\n      }\n\n      return evt;\n    });\n  };\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n\n\n  BaseClient.prototype._normalizeEvent = function (event, depth) {\n    if (!event) {\n      return null;\n    }\n\n    var normalized = __assign(__assign(__assign(__assign(__assign({}, event), event.breadcrumbs && {\n      breadcrumbs: event.breadcrumbs.map(function (b) {\n        return __assign(__assign({}, b), b.data && {\n          data: normalize(b.data, depth)\n        });\n      })\n    }), event.user && {\n      user: normalize(event.user, depth)\n    }), event.contexts && {\n      contexts: normalize(event.contexts, depth)\n    }), event.extra && {\n      extra: normalize(event.extra, depth)\n    }); // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n\n\n    if (event.contexts && event.contexts.trace) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      normalized.contexts.trace = event.contexts.trace;\n    }\n\n    return normalized;\n  };\n  /**\n   *  Enhances event using the client configuration.\n   *  It takes care of all \"static\" values like environment, release and `dist`,\n   *  as well as truncating overly long values.\n   * @param event event instance to be enhanced\n   */\n\n\n  BaseClient.prototype._applyClientOptions = function (event) {\n    var options = this.getOptions();\n    var environment = options.environment,\n        release = options.release,\n        dist = options.dist,\n        _a = options.maxValueLength,\n        maxValueLength = _a === void 0 ? 250 : _a;\n\n    if (!('environment' in event)) {\n      event.environment = 'environment' in options ? environment : 'production';\n    }\n\n    if (event.release === undefined && release !== undefined) {\n      event.release = release;\n    }\n\n    if (event.dist === undefined && dist !== undefined) {\n      event.dist = dist;\n    }\n\n    if (event.message) {\n      event.message = truncate(event.message, maxValueLength);\n    }\n\n    var exception = event.exception && event.exception.values && event.exception.values[0];\n\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n\n    var request = event.request;\n\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n  };\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param sdkInfo The sdkInfo of the event that will be filled with all integrations.\n   */\n\n\n  BaseClient.prototype._applyIntegrationsMetadata = function (event) {\n    var sdkInfo = event.sdk;\n    var integrationsArray = Object.keys(this._integrations);\n\n    if (sdkInfo && integrationsArray.length > 0) {\n      sdkInfo.integrations = integrationsArray;\n    }\n  };\n  /**\n   * Tells the backend to send this event\n   * @param event The Sentry event to send\n   */\n\n\n  BaseClient.prototype._sendEvent = function (event) {\n    this._getBackend().sendEvent(event);\n  };\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n\n\n  BaseClient.prototype._captureEvent = function (event, hint, scope) {\n    return this._processEvent(event, hint, scope).then(function (finalEvent) {\n      return finalEvent.event_id;\n    }, function (reason) {\n      logger.error(reason);\n      return undefined;\n    });\n  };\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n\n\n  BaseClient.prototype._processEvent = function (event, hint, scope) {\n    var _this = this; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\n    var _a = this.getOptions(),\n        beforeSend = _a.beforeSend,\n        sampleRate = _a.sampleRate;\n\n    if (!this._isEnabled()) {\n      return SyncPromise.reject(new SentryError('SDK not enabled, will not send event.'));\n    }\n\n    var isTransaction = event.type === 'transaction'; // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n\n    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      return SyncPromise.reject(new SentryError(\"Discarding event because it's not included in the random sample (sampling rate = \" + sampleRate + \")\"));\n    }\n\n    return this._prepareEvent(event, scope, hint).then(function (prepared) {\n      if (prepared === null) {\n        throw new SentryError('An event processor returned null, will not send event.');\n      }\n\n      var isInternalException = hint && hint.data && hint.data.__sentry__ === true;\n\n      if (isInternalException || isTransaction || !beforeSend) {\n        return prepared;\n      }\n\n      var beforeSendResult = beforeSend(prepared, hint);\n\n      if (typeof beforeSendResult === 'undefined') {\n        throw new SentryError('`beforeSend` method has to return `null` or a valid event.');\n      } else if (isThenable(beforeSendResult)) {\n        return beforeSendResult.then(function (event) {\n          return event;\n        }, function (e) {\n          throw new SentryError(\"beforeSend rejected with \" + e);\n        });\n      }\n\n      return beforeSendResult;\n    }).then(function (processedEvent) {\n      if (processedEvent === null) {\n        throw new SentryError('`beforeSend` returned `null`, will not send event.');\n      }\n\n      var session = scope && scope.getSession && scope.getSession();\n\n      if (!isTransaction && session) {\n        _this._updateSessionFromEvent(session, processedEvent);\n      }\n\n      _this._sendEvent(processedEvent);\n\n      return processedEvent;\n    }).then(null, function (reason) {\n      if (reason instanceof SentryError) {\n        throw reason;\n      }\n\n      _this.captureException(reason, {\n        data: {\n          __sentry__: true\n        },\n        originalException: reason\n      });\n\n      throw new SentryError(\"Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: \" + reason);\n    });\n  };\n  /**\n   * Occupies the client with processing and event\n   */\n\n\n  BaseClient.prototype._process = function (promise) {\n    var _this = this;\n\n    this._processing += 1;\n    promise.then(function (value) {\n      _this._processing -= 1;\n      return value;\n    }, function (reason) {\n      _this._processing -= 1;\n      return reason;\n    });\n  };\n\n  return BaseClient;\n}();\n\nexport { BaseClient }; //# sourceMappingURL=baseclient.js.map","map":{"version":3,"sources":["C:/Users/Fernando Martinez/Documents/Programacion/SignWriter/Frontend JD/node_modules/@sentry/core/esm/baseclient.js"],"names":["__assign","__values","Scope","SessionStatus","dateTimestampInSeconds","Dsn","isPrimitive","isThenable","logger","normalize","SentryError","SyncPromise","truncate","uuid4","setupIntegrations","BaseClient","backendClass","options","_integrations","_processing","_backend","_options","dsn","_dsn","prototype","captureException","exception","hint","scope","_this","eventId","event_id","_process","_getBackend","eventFromException","then","event","_captureEvent","result","captureMessage","message","level","promisedEvent","eventFromMessage","String","captureEvent","captureSession","session","release","warn","_sendSession","getDsn","getOptions","flush","timeout","_isClientProcessing","ready","getTransport","close","transportFlushed","enabled","_isEnabled","getIntegration","integration","id","_oO","_updateSessionFromEvent","e_1","_a","crashed","errored","userAgent","exceptions","values","exceptions_1","exceptions_1_1","next","done","ex","value","mechanism","handled","e_1_1","error","return","call","user","headers","request","key","toLowerCase","update","status","Crashed","errors","Number","sendSession","resolve","ticked","tick","interval","setInterval","clearInterval","undefined","_prepareEvent","normalizeDepth","prepared","timestamp","_applyClientOptions","_applyIntegrationsMetadata","finalScope","captureContext","clone","applyToEvent","evt","_normalizeEvent","depth","normalized","breadcrumbs","map","b","data","contexts","extra","trace","environment","dist","maxValueLength","url","sdkInfo","sdk","integrationsArray","Object","keys","length","integrations","_sendEvent","sendEvent","_processEvent","finalEvent","reason","beforeSend","sampleRate","reject","isTransaction","type","Math","random","isInternalException","__sentry__","beforeSendResult","e","processedEvent","getSession","originalException","promise"],"mappings":"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","sourcesContent":["import { __assign, __values } from \"tslib\";\n/* eslint-disable max-lines */\nimport { Scope } from '@sentry/hub';\nimport { SessionStatus, } from '@sentry/types';\nimport { dateTimestampInSeconds, Dsn, isPrimitive, isThenable, logger, normalize, SentryError, SyncPromise, truncate, uuid4, } from '@sentry/utils';\nimport { setupIntegrations } from './integration';\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient.prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nvar BaseClient = /** @class */ (function () {\n    /**\n     * Initializes this client instance.\n     *\n     * @param backendClass A constructor function to create the backend.\n     * @param options Options for the client.\n     */\n    function BaseClient(backendClass, options) {\n        /** Array of used integrations. */\n        this._integrations = {};\n        /** Number of call being processed */\n        this._processing = 0;\n        this._backend = new backendClass(options);\n        this._options = options;\n        if (options.dsn) {\n            this._dsn = new Dsn(options.dsn);\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n    BaseClient.prototype.captureException = function (exception, hint, scope) {\n        var _this = this;\n        var eventId = hint && hint.event_id;\n        this._process(this._getBackend()\n            .eventFromException(exception, hint)\n            .then(function (event) { return _this._captureEvent(event, hint, scope); })\n            .then(function (result) {\n            eventId = result;\n        }));\n        return eventId;\n    };\n    /**\n     * @inheritDoc\n     */\n    BaseClient.prototype.captureMessage = function (message, level, hint, scope) {\n        var _this = this;\n        var eventId = hint && hint.event_id;\n        var promisedEvent = isPrimitive(message)\n            ? this._getBackend().eventFromMessage(String(message), level, hint)\n            : this._getBackend().eventFromException(message, hint);\n        this._process(promisedEvent\n            .then(function (event) { return _this._captureEvent(event, hint, scope); })\n            .then(function (result) {\n            eventId = result;\n        }));\n        return eventId;\n    };\n    /**\n     * @inheritDoc\n     */\n    BaseClient.prototype.captureEvent = function (event, hint, scope) {\n        var eventId = hint && hint.event_id;\n        this._process(this._captureEvent(event, hint, scope).then(function (result) {\n            eventId = result;\n        }));\n        return eventId;\n    };\n    /**\n     * @inheritDoc\n     */\n    BaseClient.prototype.captureSession = function (session) {\n        if (!session.release) {\n            logger.warn('Discarded session because of missing release');\n        }\n        else {\n            this._sendSession(session);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    BaseClient.prototype.getDsn = function () {\n        return this._dsn;\n    };\n    /**\n     * @inheritDoc\n     */\n    BaseClient.prototype.getOptions = function () {\n        return this._options;\n    };\n    /**\n     * @inheritDoc\n     */\n    BaseClient.prototype.flush = function (timeout) {\n        var _this = this;\n        return this._isClientProcessing(timeout).then(function (ready) {\n            return _this._getBackend()\n                .getTransport()\n                .close(timeout)\n                .then(function (transportFlushed) { return ready && transportFlushed; });\n        });\n    };\n    /**\n     * @inheritDoc\n     */\n    BaseClient.prototype.close = function (timeout) {\n        var _this = this;\n        return this.flush(timeout).then(function (result) {\n            _this.getOptions().enabled = false;\n            return result;\n        });\n    };\n    /**\n     * Sets up the integrations\n     */\n    BaseClient.prototype.setupIntegrations = function () {\n        if (this._isEnabled()) {\n            this._integrations = setupIntegrations(this._options);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    BaseClient.prototype.getIntegration = function (integration) {\n        try {\n            return this._integrations[integration.id] || null;\n        }\n        catch (_oO) {\n            logger.warn(\"Cannot retrieve integration \" + integration.id + \" from the current Client\");\n            return null;\n        }\n    };\n    /** Updates existing session based on the provided event */\n    BaseClient.prototype._updateSessionFromEvent = function (session, event) {\n        var e_1, _a;\n        var crashed = false;\n        var errored = false;\n        var userAgent;\n        var exceptions = event.exception && event.exception.values;\n        if (exceptions) {\n            errored = true;\n            try {\n                for (var exceptions_1 = __values(exceptions), exceptions_1_1 = exceptions_1.next(); !exceptions_1_1.done; exceptions_1_1 = exceptions_1.next()) {\n                    var ex = exceptions_1_1.value;\n                    var mechanism = ex.mechanism;\n                    if (mechanism && mechanism.handled === false) {\n                        crashed = true;\n                        break;\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (exceptions_1_1 && !exceptions_1_1.done && (_a = exceptions_1.return)) _a.call(exceptions_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n        var user = event.user;\n        if (!session.userAgent) {\n            var headers = event.request ? event.request.headers : {};\n            for (var key in headers) {\n                if (key.toLowerCase() === 'user-agent') {\n                    userAgent = headers[key];\n                    break;\n                }\n            }\n        }\n        session.update(__assign(__assign({}, (crashed && { status: SessionStatus.Crashed })), { user: user,\n            userAgent: userAgent, errors: session.errors + Number(errored || crashed) }));\n    };\n    /** Deliver captured session to Sentry */\n    BaseClient.prototype._sendSession = function (session) {\n        this._getBackend().sendSession(session);\n    };\n    /** Waits for the client to be done with processing. */\n    BaseClient.prototype._isClientProcessing = function (timeout) {\n        var _this = this;\n        return new SyncPromise(function (resolve) {\n            var ticked = 0;\n            var tick = 1;\n            var interval = setInterval(function () {\n                if (_this._processing == 0) {\n                    clearInterval(interval);\n                    resolve(true);\n                }\n                else {\n                    ticked += tick;\n                    if (timeout && ticked >= timeout) {\n                        clearInterval(interval);\n                        resolve(false);\n                    }\n                }\n            }, tick);\n        });\n    };\n    /** Returns the current backend. */\n    BaseClient.prototype._getBackend = function () {\n        return this._backend;\n    };\n    /** Determines whether this SDK is enabled and a valid Dsn is present. */\n    BaseClient.prototype._isEnabled = function () {\n        return this.getOptions().enabled !== false && this._dsn !== undefined;\n    };\n    /**\n     * Adds common information to events.\n     *\n     * The information includes release and environment from `options`,\n     * breadcrumbs and context (extra, tags and user) from the scope.\n     *\n     * Information that is already present in the event is never overwritten. For\n     * nested objects, such as the context, keys are merged.\n     *\n     * @param event The original event.\n     * @param hint May contain additional information about the original exception.\n     * @param scope A scope containing event metadata.\n     * @returns A new event with more information.\n     */\n    BaseClient.prototype._prepareEvent = function (event, scope, hint) {\n        var _this = this;\n        var _a = this.getOptions().normalizeDepth, normalizeDepth = _a === void 0 ? 3 : _a;\n        var prepared = __assign(__assign({}, event), { event_id: event.event_id || (hint && hint.event_id ? hint.event_id : uuid4()), timestamp: event.timestamp || dateTimestampInSeconds() });\n        this._applyClientOptions(prepared);\n        this._applyIntegrationsMetadata(prepared);\n        // If we have scope given to us, use it as the base for further modifications.\n        // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n        var finalScope = scope;\n        if (hint && hint.captureContext) {\n            finalScope = Scope.clone(finalScope).update(hint.captureContext);\n        }\n        // We prepare the result here with a resolved Event.\n        var result = SyncPromise.resolve(prepared);\n        // This should be the last thing called, since we want that\n        // {@link Hub.addEventProcessor} gets the finished prepared event.\n        if (finalScope) {\n            // In case we have a hub we reassign it.\n            result = finalScope.applyToEvent(prepared, hint);\n        }\n        return result.then(function (evt) {\n            if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n                return _this._normalizeEvent(evt, normalizeDepth);\n            }\n            return evt;\n        });\n    };\n    /**\n     * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n     * Normalized keys:\n     * - `breadcrumbs.data`\n     * - `user`\n     * - `contexts`\n     * - `extra`\n     * @param event Event\n     * @returns Normalized event\n     */\n    BaseClient.prototype._normalizeEvent = function (event, depth) {\n        if (!event) {\n            return null;\n        }\n        var normalized = __assign(__assign(__assign(__assign(__assign({}, event), (event.breadcrumbs && {\n            breadcrumbs: event.breadcrumbs.map(function (b) { return (__assign(__assign({}, b), (b.data && {\n                data: normalize(b.data, depth),\n            }))); }),\n        })), (event.user && {\n            user: normalize(event.user, depth),\n        })), (event.contexts && {\n            contexts: normalize(event.contexts, depth),\n        })), (event.extra && {\n            extra: normalize(event.extra, depth),\n        }));\n        // event.contexts.trace stores information about a Transaction. Similarly,\n        // event.spans[] stores information about child Spans. Given that a\n        // Transaction is conceptually a Span, normalization should apply to both\n        // Transactions and Spans consistently.\n        // For now the decision is to skip normalization of Transactions and Spans,\n        // so this block overwrites the normalized event to add back the original\n        // Transaction information prior to normalization.\n        if (event.contexts && event.contexts.trace) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            normalized.contexts.trace = event.contexts.trace;\n        }\n        return normalized;\n    };\n    /**\n     *  Enhances event using the client configuration.\n     *  It takes care of all \"static\" values like environment, release and `dist`,\n     *  as well as truncating overly long values.\n     * @param event event instance to be enhanced\n     */\n    BaseClient.prototype._applyClientOptions = function (event) {\n        var options = this.getOptions();\n        var environment = options.environment, release = options.release, dist = options.dist, _a = options.maxValueLength, maxValueLength = _a === void 0 ? 250 : _a;\n        if (!('environment' in event)) {\n            event.environment = 'environment' in options ? environment : 'production';\n        }\n        if (event.release === undefined && release !== undefined) {\n            event.release = release;\n        }\n        if (event.dist === undefined && dist !== undefined) {\n            event.dist = dist;\n        }\n        if (event.message) {\n            event.message = truncate(event.message, maxValueLength);\n        }\n        var exception = event.exception && event.exception.values && event.exception.values[0];\n        if (exception && exception.value) {\n            exception.value = truncate(exception.value, maxValueLength);\n        }\n        var request = event.request;\n        if (request && request.url) {\n            request.url = truncate(request.url, maxValueLength);\n        }\n    };\n    /**\n     * This function adds all used integrations to the SDK info in the event.\n     * @param sdkInfo The sdkInfo of the event that will be filled with all integrations.\n     */\n    BaseClient.prototype._applyIntegrationsMetadata = function (event) {\n        var sdkInfo = event.sdk;\n        var integrationsArray = Object.keys(this._integrations);\n        if (sdkInfo && integrationsArray.length > 0) {\n            sdkInfo.integrations = integrationsArray;\n        }\n    };\n    /**\n     * Tells the backend to send this event\n     * @param event The Sentry event to send\n     */\n    BaseClient.prototype._sendEvent = function (event) {\n        this._getBackend().sendEvent(event);\n    };\n    /**\n     * Processes the event and logs an error in case of rejection\n     * @param event\n     * @param hint\n     * @param scope\n     */\n    BaseClient.prototype._captureEvent = function (event, hint, scope) {\n        return this._processEvent(event, hint, scope).then(function (finalEvent) {\n            return finalEvent.event_id;\n        }, function (reason) {\n            logger.error(reason);\n            return undefined;\n        });\n    };\n    /**\n     * Processes an event (either error or message) and sends it to Sentry.\n     *\n     * This also adds breadcrumbs and context information to the event. However,\n     * platform specific meta data (such as the User's IP address) must be added\n     * by the SDK implementor.\n     *\n     *\n     * @param event The event to send to Sentry.\n     * @param hint May contain additional information about the original exception.\n     * @param scope A scope containing event metadata.\n     * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n     */\n    BaseClient.prototype._processEvent = function (event, hint, scope) {\n        var _this = this;\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        var _a = this.getOptions(), beforeSend = _a.beforeSend, sampleRate = _a.sampleRate;\n        if (!this._isEnabled()) {\n            return SyncPromise.reject(new SentryError('SDK not enabled, will not send event.'));\n        }\n        var isTransaction = event.type === 'transaction';\n        // 1.0 === 100% events are sent\n        // 0.0 === 0% events are sent\n        // Sampling for transaction happens somewhere else\n        if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n            return SyncPromise.reject(new SentryError(\"Discarding event because it's not included in the random sample (sampling rate = \" + sampleRate + \")\"));\n        }\n        return this._prepareEvent(event, scope, hint)\n            .then(function (prepared) {\n            if (prepared === null) {\n                throw new SentryError('An event processor returned null, will not send event.');\n            }\n            var isInternalException = hint && hint.data && hint.data.__sentry__ === true;\n            if (isInternalException || isTransaction || !beforeSend) {\n                return prepared;\n            }\n            var beforeSendResult = beforeSend(prepared, hint);\n            if (typeof beforeSendResult === 'undefined') {\n                throw new SentryError('`beforeSend` method has to return `null` or a valid event.');\n            }\n            else if (isThenable(beforeSendResult)) {\n                return beforeSendResult.then(function (event) { return event; }, function (e) {\n                    throw new SentryError(\"beforeSend rejected with \" + e);\n                });\n            }\n            return beforeSendResult;\n        })\n            .then(function (processedEvent) {\n            if (processedEvent === null) {\n                throw new SentryError('`beforeSend` returned `null`, will not send event.');\n            }\n            var session = scope && scope.getSession && scope.getSession();\n            if (!isTransaction && session) {\n                _this._updateSessionFromEvent(session, processedEvent);\n            }\n            _this._sendEvent(processedEvent);\n            return processedEvent;\n        })\n            .then(null, function (reason) {\n            if (reason instanceof SentryError) {\n                throw reason;\n            }\n            _this.captureException(reason, {\n                data: {\n                    __sentry__: true,\n                },\n                originalException: reason,\n            });\n            throw new SentryError(\"Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: \" + reason);\n        });\n    };\n    /**\n     * Occupies the client with processing and event\n     */\n    BaseClient.prototype._process = function (promise) {\n        var _this = this;\n        this._processing += 1;\n        promise.then(function (value) {\n            _this._processing -= 1;\n            return value;\n        }, function (reason) {\n            _this._processing -= 1;\n            return reason;\n        });\n    };\n    return BaseClient;\n}());\nexport { BaseClient };\n//# sourceMappingURL=baseclient.js.map"]},"metadata":{},"sourceType":"module"}
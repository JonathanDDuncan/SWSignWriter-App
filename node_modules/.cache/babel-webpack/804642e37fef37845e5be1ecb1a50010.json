{"ast":null,"code":"import { __assign } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\nimport { getCurrentHub } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { addExceptionMechanism, addInstrumentationHandler, getLocationHref, isErrorEvent, isPrimitive, isString, logger } from '@sentry/utils';\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n/** Global handlers */\n\nvar GlobalHandlers =\n/** @class */\nfunction () {\n  /** JSDoc */\n  function GlobalHandlers(options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = GlobalHandlers.id;\n    /** JSDoc */\n\n    this._onErrorHandlerInstalled = false;\n    /** JSDoc */\n\n    this._onUnhandledRejectionHandlerInstalled = false;\n    this._options = __assign({\n      onerror: true,\n      onunhandledrejection: true\n    }, options);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  GlobalHandlers.prototype.setupOnce = function () {\n    Error.stackTraceLimit = 50;\n\n    if (this._options.onerror) {\n      logger.log('Global Handler attached: onerror');\n\n      this._installGlobalOnErrorHandler();\n    }\n\n    if (this._options.onunhandledrejection) {\n      logger.log('Global Handler attached: onunhandledrejection');\n\n      this._installGlobalOnUnhandledRejectionHandler();\n    }\n  };\n  /** JSDoc */\n\n\n  GlobalHandlers.prototype._installGlobalOnErrorHandler = function () {\n    var _this = this;\n\n    if (this._onErrorHandlerInstalled) {\n      return;\n    }\n\n    addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: function callback(data) {\n        var error = data.error;\n        var currentHub = getCurrentHub();\n        var hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        var isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return;\n        }\n\n        var client = currentHub.getClient();\n        var event = isPrimitive(error) ? _this._eventFromIncompleteOnError(data.msg, data.url, data.line, data.column) : _this._enhanceEventWithInitialFrame(eventFromUnknownInput(error, undefined, {\n          attachStacktrace: client && client.getOptions().attachStacktrace,\n          rejection: false\n        }), data.url, data.line, data.column);\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onerror'\n        });\n        currentHub.captureEvent(event, {\n          originalException: error\n        });\n      },\n      type: 'error'\n    });\n    this._onErrorHandlerInstalled = true;\n  };\n  /** JSDoc */\n\n\n  GlobalHandlers.prototype._installGlobalOnUnhandledRejectionHandler = function () {\n    var _this = this;\n\n    if (this._onUnhandledRejectionHandlerInstalled) {\n      return;\n    }\n\n    addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: function callback(e) {\n        var error = e; // dig the object of the rejection out of known event types\n\n        try {\n          // PromiseRejectionEvents store the object of the rejection under 'reason'\n          // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n          if ('reason' in e) {\n            error = e.reason;\n          } // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n          // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n          // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n          // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n          // https://github.com/getsentry/sentry-javascript/issues/2380\n          else if ('detail' in e && 'reason' in e.detail) {\n            error = e.detail.reason;\n          }\n        } catch (_oO) {// no-empty\n        }\n\n        var currentHub = getCurrentHub();\n        var hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        var isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return true;\n        }\n\n        var client = currentHub.getClient();\n        var event = isPrimitive(error) ? _this._eventFromRejectionWithPrimitive(error) : eventFromUnknownInput(error, undefined, {\n          attachStacktrace: client && client.getOptions().attachStacktrace,\n          rejection: true\n        });\n        event.level = Severity.Error;\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onunhandledrejection'\n        });\n        currentHub.captureEvent(event, {\n          originalException: error\n        });\n        return;\n      },\n      type: 'unhandledrejection'\n    });\n    this._onUnhandledRejectionHandlerInstalled = true;\n  };\n  /**\n   * This function creates a stack from an old, error-less onerror handler.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  GlobalHandlers.prototype._eventFromIncompleteOnError = function (msg, url, line, column) {\n    var ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i; // If 'message' is ErrorEvent, get real message from inside\n\n    var message = isErrorEvent(msg) ? msg.message : msg;\n    var name;\n\n    if (isString(message)) {\n      var groups = message.match(ERROR_TYPES_RE);\n\n      if (groups) {\n        name = groups[1];\n        message = groups[2];\n      }\n    }\n\n    var event = {\n      exception: {\n        values: [{\n          type: name || 'Error',\n          value: message\n        }]\n      }\n    };\n    return this._enhanceEventWithInitialFrame(event, url, line, column);\n  };\n  /**\n   * Create an event from a promise rejection where the `reason` is a primitive.\n   *\n   * @param reason: The `reason` property of the promise rejection\n   * @returns An Event object with an appropriate `exception` value\n   */\n\n\n  GlobalHandlers.prototype._eventFromRejectionWithPrimitive = function (reason) {\n    return {\n      exception: {\n        values: [{\n          type: 'UnhandledRejection',\n          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n          value: \"Non-Error promise rejection captured with value: \" + String(reason)\n        }]\n      }\n    };\n  };\n  /** JSDoc */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  GlobalHandlers.prototype._enhanceEventWithInitialFrame = function (event, url, line, column) {\n    event.exception = event.exception || {};\n    event.exception.values = event.exception.values || [];\n    event.exception.values[0] = event.exception.values[0] || {};\n    event.exception.values[0].stacktrace = event.exception.values[0].stacktrace || {};\n    event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames || [];\n    var colno = isNaN(parseInt(column, 10)) ? undefined : column;\n    var lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n    var filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n    if (event.exception.values[0].stacktrace.frames.length === 0) {\n      event.exception.values[0].stacktrace.frames.push({\n        colno: colno,\n        filename: filename,\n        function: '?',\n        in_app: true,\n        lineno: lineno\n      });\n    }\n\n    return event;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  GlobalHandlers.id = 'GlobalHandlers';\n  return GlobalHandlers;\n}();\n\nexport { GlobalHandlers }; //# sourceMappingURL=globalhandlers.js.map","map":{"version":3,"sources":["C:/Users/Fernando Martinez/Documents/Programacion/SignWriter/Frontend JD/node_modules/@sentry/browser/esm/integrations/globalhandlers.js"],"names":["__assign","getCurrentHub","Severity","addExceptionMechanism","addInstrumentationHandler","getLocationHref","isErrorEvent","isPrimitive","isString","logger","eventFromUnknownInput","shouldIgnoreOnError","GlobalHandlers","options","name","id","_onErrorHandlerInstalled","_onUnhandledRejectionHandlerInstalled","_options","onerror","onunhandledrejection","prototype","setupOnce","Error","stackTraceLimit","log","_installGlobalOnErrorHandler","_installGlobalOnUnhandledRejectionHandler","_this","callback","data","error","currentHub","hasIntegration","getIntegration","isFailedOwnDelivery","__sentry_own_request__","client","getClient","event","_eventFromIncompleteOnError","msg","url","line","column","_enhanceEventWithInitialFrame","undefined","attachStacktrace","getOptions","rejection","handled","type","captureEvent","originalException","e","reason","detail","_oO","_eventFromRejectionWithPrimitive","level","ERROR_TYPES_RE","message","groups","match","exception","values","value","String","stacktrace","frames","colno","isNaN","parseInt","lineno","filename","length","push","function","in_app"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { addExceptionMechanism, addInstrumentationHandler, getLocationHref, isErrorEvent, isPrimitive, isString, logger, } from '@sentry/utils';\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n/** Global handlers */\nvar GlobalHandlers = /** @class */ (function () {\n    /** JSDoc */\n    function GlobalHandlers(options) {\n        /**\n         * @inheritDoc\n         */\n        this.name = GlobalHandlers.id;\n        /** JSDoc */\n        this._onErrorHandlerInstalled = false;\n        /** JSDoc */\n        this._onUnhandledRejectionHandlerInstalled = false;\n        this._options = __assign({ onerror: true, onunhandledrejection: true }, options);\n    }\n    /**\n     * @inheritDoc\n     */\n    GlobalHandlers.prototype.setupOnce = function () {\n        Error.stackTraceLimit = 50;\n        if (this._options.onerror) {\n            logger.log('Global Handler attached: onerror');\n            this._installGlobalOnErrorHandler();\n        }\n        if (this._options.onunhandledrejection) {\n            logger.log('Global Handler attached: onunhandledrejection');\n            this._installGlobalOnUnhandledRejectionHandler();\n        }\n    };\n    /** JSDoc */\n    GlobalHandlers.prototype._installGlobalOnErrorHandler = function () {\n        var _this = this;\n        if (this._onErrorHandlerInstalled) {\n            return;\n        }\n        addInstrumentationHandler({\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            callback: function (data) {\n                var error = data.error;\n                var currentHub = getCurrentHub();\n                var hasIntegration = currentHub.getIntegration(GlobalHandlers);\n                var isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n                if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n                    return;\n                }\n                var client = currentHub.getClient();\n                var event = isPrimitive(error)\n                    ? _this._eventFromIncompleteOnError(data.msg, data.url, data.line, data.column)\n                    : _this._enhanceEventWithInitialFrame(eventFromUnknownInput(error, undefined, {\n                        attachStacktrace: client && client.getOptions().attachStacktrace,\n                        rejection: false,\n                    }), data.url, data.line, data.column);\n                addExceptionMechanism(event, {\n                    handled: false,\n                    type: 'onerror',\n                });\n                currentHub.captureEvent(event, {\n                    originalException: error,\n                });\n            },\n            type: 'error',\n        });\n        this._onErrorHandlerInstalled = true;\n    };\n    /** JSDoc */\n    GlobalHandlers.prototype._installGlobalOnUnhandledRejectionHandler = function () {\n        var _this = this;\n        if (this._onUnhandledRejectionHandlerInstalled) {\n            return;\n        }\n        addInstrumentationHandler({\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            callback: function (e) {\n                var error = e;\n                // dig the object of the rejection out of known event types\n                try {\n                    // PromiseRejectionEvents store the object of the rejection under 'reason'\n                    // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n                    if ('reason' in e) {\n                        error = e.reason;\n                    }\n                    // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n                    // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n                    // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n                    // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n                    // https://github.com/getsentry/sentry-javascript/issues/2380\n                    else if ('detail' in e && 'reason' in e.detail) {\n                        error = e.detail.reason;\n                    }\n                }\n                catch (_oO) {\n                    // no-empty\n                }\n                var currentHub = getCurrentHub();\n                var hasIntegration = currentHub.getIntegration(GlobalHandlers);\n                var isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n                if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n                    return true;\n                }\n                var client = currentHub.getClient();\n                var event = isPrimitive(error)\n                    ? _this._eventFromRejectionWithPrimitive(error)\n                    : eventFromUnknownInput(error, undefined, {\n                        attachStacktrace: client && client.getOptions().attachStacktrace,\n                        rejection: true,\n                    });\n                event.level = Severity.Error;\n                addExceptionMechanism(event, {\n                    handled: false,\n                    type: 'onunhandledrejection',\n                });\n                currentHub.captureEvent(event, {\n                    originalException: error,\n                });\n                return;\n            },\n            type: 'unhandledrejection',\n        });\n        this._onUnhandledRejectionHandlerInstalled = true;\n    };\n    /**\n     * This function creates a stack from an old, error-less onerror handler.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    GlobalHandlers.prototype._eventFromIncompleteOnError = function (msg, url, line, column) {\n        var ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n        // If 'message' is ErrorEvent, get real message from inside\n        var message = isErrorEvent(msg) ? msg.message : msg;\n        var name;\n        if (isString(message)) {\n            var groups = message.match(ERROR_TYPES_RE);\n            if (groups) {\n                name = groups[1];\n                message = groups[2];\n            }\n        }\n        var event = {\n            exception: {\n                values: [\n                    {\n                        type: name || 'Error',\n                        value: message,\n                    },\n                ],\n            },\n        };\n        return this._enhanceEventWithInitialFrame(event, url, line, column);\n    };\n    /**\n     * Create an event from a promise rejection where the `reason` is a primitive.\n     *\n     * @param reason: The `reason` property of the promise rejection\n     * @returns An Event object with an appropriate `exception` value\n     */\n    GlobalHandlers.prototype._eventFromRejectionWithPrimitive = function (reason) {\n        return {\n            exception: {\n                values: [\n                    {\n                        type: 'UnhandledRejection',\n                        // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n                        value: \"Non-Error promise rejection captured with value: \" + String(reason),\n                    },\n                ],\n            },\n        };\n    };\n    /** JSDoc */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    GlobalHandlers.prototype._enhanceEventWithInitialFrame = function (event, url, line, column) {\n        event.exception = event.exception || {};\n        event.exception.values = event.exception.values || [];\n        event.exception.values[0] = event.exception.values[0] || {};\n        event.exception.values[0].stacktrace = event.exception.values[0].stacktrace || {};\n        event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames || [];\n        var colno = isNaN(parseInt(column, 10)) ? undefined : column;\n        var lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n        var filename = isString(url) && url.length > 0 ? url : getLocationHref();\n        if (event.exception.values[0].stacktrace.frames.length === 0) {\n            event.exception.values[0].stacktrace.frames.push({\n                colno: colno,\n                filename: filename,\n                function: '?',\n                in_app: true,\n                lineno: lineno,\n            });\n        }\n        return event;\n    };\n    /**\n     * @inheritDoc\n     */\n    GlobalHandlers.id = 'GlobalHandlers';\n    return GlobalHandlers;\n}());\nexport { GlobalHandlers };\n//# sourceMappingURL=globalhandlers.js.map"]},"metadata":{},"sourceType":"module"}
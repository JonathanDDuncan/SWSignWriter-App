{"ast":null,"code":"/**\n * This was originally forked from https://github.com/occ/TraceKit, but has since been\n * largely modified and is now maintained as part of Sentry JS SDK.\n */\nimport { __assign } from \"tslib\"; // global reference to slice\n\nvar UNKNOWN_FUNCTION = '?'; // Chromium based browsers: Chrome, Brave, new Opera, new Edge\n\nvar chrome = /^\\s*at (?:(.*?) ?\\()?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i; // gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\n\nvar gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nvar winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nvar geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nvar chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/; // Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\n\nvar reactMinifiedRegexp = /Minified React error #\\d+;/i;\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n\nexport function computeStackTrace(ex) {\n  var stack = null;\n  var popSize = 0;\n\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      popSize = ex.framesToPop;\n    } else if (reactMinifiedRegexp.test(ex.message)) {\n      popSize = 1;\n    }\n  }\n\n  try {\n    // This must be tried first because Opera 10 *destroys*\n    // its stacktrace property if you try to access the stack\n    // property first!!\n    stack = computeStackTraceFromStacktraceProp(ex);\n\n    if (stack) {\n      return popFrames(stack, popSize);\n    }\n  } catch (e) {// no-empty\n  }\n\n  try {\n    stack = computeStackTraceFromStackProp(ex);\n\n    if (stack) {\n      return popFrames(stack, popSize);\n    }\n  } catch (e) {// no-empty\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex && ex.name,\n    stack: [],\n    failed: true\n  };\n}\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, complexity\n\nfunction computeStackTraceFromStackProp(ex) {\n  if (!ex || !ex.stack) {\n    return null;\n  }\n\n  var stack = [];\n  var lines = ex.stack.split('\\n');\n  var isEval;\n  var submatch;\n  var parts;\n  var element;\n\n  for (var i = 0; i < lines.length; ++i) {\n    if (parts = chrome.exec(lines[i])) {\n      var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n\n      isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n\n      if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = submatch[1]; // url\n\n        parts[3] = submatch[2]; // line\n\n        parts[4] = submatch[3]; // column\n      }\n\n      element = {\n        // working with the regexp above is super painful. it is quite a hack, but just stripping the `address at `\n        // prefix here seems like the quickest solution for now.\n        url: parts[2] && parts[2].indexOf('address at ') === 0 ? parts[2].substr('address at '.length) : parts[2],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: isNative ? [parts[2]] : [],\n        line: parts[3] ? +parts[3] : null,\n        column: parts[4] ? +parts[4] : null\n      };\n    } else if (parts = winjs.exec(lines[i])) {\n      element = {\n        url: parts[2],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: [],\n        line: +parts[3],\n        column: parts[4] ? +parts[4] : null\n      };\n    } else if (parts = gecko.exec(lines[i])) {\n      isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n\n      if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || \"eval\";\n        parts[3] = submatch[1];\n        parts[4] = submatch[2];\n        parts[5] = ''; // no column when eval\n      } else if (i === 0 && !parts[5] && ex.columnNumber !== void 0) {\n        // FireFox uses this awesome columnNumber property for its top frame\n        // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n        // so adding 1\n        // NOTE: this hack doesn't work if top-most frame is eval\n        stack[0].column = ex.columnNumber + 1;\n      }\n\n      element = {\n        url: parts[3],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: parts[2] ? parts[2].split(',') : [],\n        line: parts[4] ? +parts[4] : null,\n        column: parts[5] ? +parts[5] : null\n      };\n    } else {\n      continue;\n    }\n\n    if (!element.func && element.line) {\n      element.func = UNKNOWN_FUNCTION;\n    }\n\n    stack.push(element);\n  }\n\n  if (!stack.length) {\n    return null;\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex.name,\n    stack: stack\n  };\n}\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction computeStackTraceFromStacktraceProp(ex) {\n  if (!ex || !ex.stacktrace) {\n    return null;\n  } // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n\n\n  var stacktrace = ex.stacktrace;\n  var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n  var opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\((.*)\\))? in (.*):\\s*$/i;\n  var lines = stacktrace.split('\\n');\n  var stack = [];\n  var parts;\n\n  for (var line = 0; line < lines.length; line += 2) {\n    var element = null;\n\n    if (parts = opera10Regex.exec(lines[line])) {\n      element = {\n        url: parts[2],\n        func: parts[3],\n        args: [],\n        line: +parts[1],\n        column: null\n      };\n    } else if (parts = opera11Regex.exec(lines[line])) {\n      element = {\n        url: parts[6],\n        func: parts[3] || parts[4],\n        args: parts[5] ? parts[5].split(',') : [],\n        line: +parts[1],\n        column: +parts[2]\n      };\n    }\n\n    if (element) {\n      if (!element.func && element.line) {\n        element.func = UNKNOWN_FUNCTION;\n      }\n\n      stack.push(element);\n    }\n  }\n\n  if (!stack.length) {\n    return null;\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex.name,\n    stack: stack\n  };\n}\n/** Remove N number of frames from the stack */\n\n\nfunction popFrames(stacktrace, popSize) {\n  try {\n    return __assign(__assign({}, stacktrace), {\n      stack: stacktrace.stack.slice(popSize)\n    });\n  } catch (e) {\n    return stacktrace;\n  }\n}\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction extractMessage(ex) {\n  var message = ex && ex.message;\n\n  if (!message) {\n    return 'No error message';\n  }\n\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n\n  return message;\n} //# sourceMappingURL=tracekit.js.map","map":{"version":3,"sources":["C:/Users/Fernando Martinez/Documents/Programacion/SignWriter/Frontend JD/node_modules/@sentry/browser/esm/tracekit.js"],"names":["__assign","UNKNOWN_FUNCTION","chrome","gecko","winjs","geckoEval","chromeEval","reactMinifiedRegexp","computeStackTrace","ex","stack","popSize","framesToPop","test","message","computeStackTraceFromStacktraceProp","popFrames","e","computeStackTraceFromStackProp","extractMessage","name","failed","lines","split","isEval","submatch","parts","element","i","length","exec","isNative","indexOf","url","substr","func","args","line","column","columnNumber","push","stacktrace","opera10Regex","opera11Regex","slice","error"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,QAAT,QAAyB,OAAzB,C,CACA;;AACA,IAAIC,gBAAgB,GAAG,GAAvB,C,CACA;;AACA,IAAIC,MAAM,GAAG,4JAAb,C,CACA;AACA;AACA;;AACA,IAAIC,KAAK,GAAG,iMAAZ;AACA,IAAIC,KAAK,GAAG,+GAAZ;AACA,IAAIC,SAAS,GAAG,+CAAhB;AACA,IAAIC,UAAU,GAAG,+BAAjB,C,CACA;;AACA,IAAIC,mBAAmB,GAAG,6BAA1B;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,EAA3B,EAA+B;AAClC,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,OAAO,GAAG,CAAd;;AACA,MAAIF,EAAJ,EAAQ;AACJ,QAAI,OAAOA,EAAE,CAACG,WAAV,KAA0B,QAA9B,EAAwC;AACpCD,MAAAA,OAAO,GAAGF,EAAE,CAACG,WAAb;AACH,KAFD,MAGK,IAAIL,mBAAmB,CAACM,IAApB,CAAyBJ,EAAE,CAACK,OAA5B,CAAJ,EAA0C;AAC3CH,MAAAA,OAAO,GAAG,CAAV;AACH;AACJ;;AACD,MAAI;AACA;AACA;AACA;AACAD,IAAAA,KAAK,GAAGK,mCAAmC,CAACN,EAAD,CAA3C;;AACA,QAAIC,KAAJ,EAAW;AACP,aAAOM,SAAS,CAACN,KAAD,EAAQC,OAAR,CAAhB;AACH;AACJ,GARD,CASA,OAAOM,CAAP,EAAU,CACN;AACH;;AACD,MAAI;AACAP,IAAAA,KAAK,GAAGQ,8BAA8B,CAACT,EAAD,CAAtC;;AACA,QAAIC,KAAJ,EAAW;AACP,aAAOM,SAAS,CAACN,KAAD,EAAQC,OAAR,CAAhB;AACH;AACJ,GALD,CAMA,OAAOM,CAAP,EAAU,CACN;AACH;;AACD,SAAO;AACHH,IAAAA,OAAO,EAAEK,cAAc,CAACV,EAAD,CADpB;AAEHW,IAAAA,IAAI,EAAEX,EAAE,IAAIA,EAAE,CAACW,IAFZ;AAGHV,IAAAA,KAAK,EAAE,EAHJ;AAIHW,IAAAA,MAAM,EAAE;AAJL,GAAP;AAMH;AACD;AACA;;AACA,SAASH,8BAAT,CAAwCT,EAAxC,EAA4C;AACxC,MAAI,CAACA,EAAD,IAAO,CAACA,EAAE,CAACC,KAAf,EAAsB;AAClB,WAAO,IAAP;AACH;;AACD,MAAIA,KAAK,GAAG,EAAZ;AACA,MAAIY,KAAK,GAAGb,EAAE,CAACC,KAAH,CAASa,KAAT,CAAe,IAAf,CAAZ;AACA,MAAIC,MAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,KAAJ;AACA,MAAIC,OAAJ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,CAACO,MAA1B,EAAkC,EAAED,CAApC,EAAuC;AACnC,QAAKF,KAAK,GAAGxB,MAAM,CAAC4B,IAAP,CAAYR,KAAK,CAACM,CAAD,CAAjB,CAAb,EAAqC;AACjC,UAAIG,QAAQ,GAAGL,KAAK,CAAC,CAAD,CAAL,IAAYA,KAAK,CAAC,CAAD,CAAL,CAASM,OAAT,CAAiB,QAAjB,MAA+B,CAA1D,CADiC,CAC4B;;AAC7DR,MAAAA,MAAM,GAAGE,KAAK,CAAC,CAAD,CAAL,IAAYA,KAAK,CAAC,CAAD,CAAL,CAASM,OAAT,CAAiB,MAAjB,MAA6B,CAAlD,CAFiC,CAEoB;;AACrD,UAAIR,MAAM,KAAKC,QAAQ,GAAGnB,UAAU,CAACwB,IAAX,CAAgBJ,KAAK,CAAC,CAAD,CAArB,CAAhB,CAAV,EAAsD;AAClD;AACAA,QAAAA,KAAK,CAAC,CAAD,CAAL,GAAWD,QAAQ,CAAC,CAAD,CAAnB,CAFkD,CAE1B;;AACxBC,QAAAA,KAAK,CAAC,CAAD,CAAL,GAAWD,QAAQ,CAAC,CAAD,CAAnB,CAHkD,CAG1B;;AACxBC,QAAAA,KAAK,CAAC,CAAD,CAAL,GAAWD,QAAQ,CAAC,CAAD,CAAnB,CAJkD,CAI1B;AAC3B;;AACDE,MAAAA,OAAO,GAAG;AACN;AACA;AACAM,QAAAA,GAAG,EAAEP,KAAK,CAAC,CAAD,CAAL,IAAYA,KAAK,CAAC,CAAD,CAAL,CAASM,OAAT,CAAiB,aAAjB,MAAoC,CAAhD,GAAoDN,KAAK,CAAC,CAAD,CAAL,CAASQ,MAAT,CAAgB,cAAcL,MAA9B,CAApD,GAA4FH,KAAK,CAAC,CAAD,CAHhG;AAINS,QAAAA,IAAI,EAAET,KAAK,CAAC,CAAD,CAAL,IAAYzB,gBAJZ;AAKNmC,QAAAA,IAAI,EAAEL,QAAQ,GAAG,CAACL,KAAK,CAAC,CAAD,CAAN,CAAH,GAAgB,EALxB;AAMNW,QAAAA,IAAI,EAAEX,KAAK,CAAC,CAAD,CAAL,GAAW,CAACA,KAAK,CAAC,CAAD,CAAjB,GAAuB,IANvB;AAONY,QAAAA,MAAM,EAAEZ,KAAK,CAAC,CAAD,CAAL,GAAW,CAACA,KAAK,CAAC,CAAD,CAAjB,GAAuB;AAPzB,OAAV;AASH,KAlBD,MAmBK,IAAKA,KAAK,GAAGtB,KAAK,CAAC0B,IAAN,CAAWR,KAAK,CAACM,CAAD,CAAhB,CAAb,EAAoC;AACrCD,MAAAA,OAAO,GAAG;AACNM,QAAAA,GAAG,EAAEP,KAAK,CAAC,CAAD,CADJ;AAENS,QAAAA,IAAI,EAAET,KAAK,CAAC,CAAD,CAAL,IAAYzB,gBAFZ;AAGNmC,QAAAA,IAAI,EAAE,EAHA;AAINC,QAAAA,IAAI,EAAE,CAACX,KAAK,CAAC,CAAD,CAJN;AAKNY,QAAAA,MAAM,EAAEZ,KAAK,CAAC,CAAD,CAAL,GAAW,CAACA,KAAK,CAAC,CAAD,CAAjB,GAAuB;AALzB,OAAV;AAOH,KARI,MASA,IAAKA,KAAK,GAAGvB,KAAK,CAAC2B,IAAN,CAAWR,KAAK,CAACM,CAAD,CAAhB,CAAb,EAAoC;AACrCJ,MAAAA,MAAM,GAAGE,KAAK,CAAC,CAAD,CAAL,IAAYA,KAAK,CAAC,CAAD,CAAL,CAASM,OAAT,CAAiB,SAAjB,IAA8B,CAAC,CAApD;;AACA,UAAIR,MAAM,KAAKC,QAAQ,GAAGpB,SAAS,CAACyB,IAAV,CAAeJ,KAAK,CAAC,CAAD,CAApB,CAAhB,CAAV,EAAqD;AACjD;AACAA,QAAAA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,IAAY,MAAvB;AACAA,QAAAA,KAAK,CAAC,CAAD,CAAL,GAAWD,QAAQ,CAAC,CAAD,CAAnB;AACAC,QAAAA,KAAK,CAAC,CAAD,CAAL,GAAWD,QAAQ,CAAC,CAAD,CAAnB;AACAC,QAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,EAAX,CALiD,CAKlC;AAClB,OAND,MAOK,IAAIE,CAAC,KAAK,CAAN,IAAW,CAACF,KAAK,CAAC,CAAD,CAAjB,IAAwBjB,EAAE,CAAC8B,YAAH,KAAoB,KAAK,CAArD,EAAwD;AACzD;AACA;AACA;AACA;AACA7B,QAAAA,KAAK,CAAC,CAAD,CAAL,CAAS4B,MAAT,GAAkB7B,EAAE,CAAC8B,YAAH,GAAkB,CAApC;AACH;;AACDZ,MAAAA,OAAO,GAAG;AACNM,QAAAA,GAAG,EAAEP,KAAK,CAAC,CAAD,CADJ;AAENS,QAAAA,IAAI,EAAET,KAAK,CAAC,CAAD,CAAL,IAAYzB,gBAFZ;AAGNmC,QAAAA,IAAI,EAAEV,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,CAASH,KAAT,CAAe,GAAf,CAAX,GAAiC,EAHjC;AAINc,QAAAA,IAAI,EAAEX,KAAK,CAAC,CAAD,CAAL,GAAW,CAACA,KAAK,CAAC,CAAD,CAAjB,GAAuB,IAJvB;AAKNY,QAAAA,MAAM,EAAEZ,KAAK,CAAC,CAAD,CAAL,GAAW,CAACA,KAAK,CAAC,CAAD,CAAjB,GAAuB;AALzB,OAAV;AAOH,KAvBI,MAwBA;AACD;AACH;;AACD,QAAI,CAACC,OAAO,CAACQ,IAAT,IAAiBR,OAAO,CAACU,IAA7B,EAAmC;AAC/BV,MAAAA,OAAO,CAACQ,IAAR,GAAelC,gBAAf;AACH;;AACDS,IAAAA,KAAK,CAAC8B,IAAN,CAAWb,OAAX;AACH;;AACD,MAAI,CAACjB,KAAK,CAACmB,MAAX,EAAmB;AACf,WAAO,IAAP;AACH;;AACD,SAAO;AACHf,IAAAA,OAAO,EAAEK,cAAc,CAACV,EAAD,CADpB;AAEHW,IAAAA,IAAI,EAAEX,EAAE,CAACW,IAFN;AAGHV,IAAAA,KAAK,EAAEA;AAHJ,GAAP;AAKH;AACD;AACA;;;AACA,SAASK,mCAAT,CAA6CN,EAA7C,EAAiD;AAC7C,MAAI,CAACA,EAAD,IAAO,CAACA,EAAE,CAACgC,UAAf,EAA2B;AACvB,WAAO,IAAP;AACH,GAH4C,CAI7C;AACA;AACA;;;AACA,MAAIA,UAAU,GAAGhC,EAAE,CAACgC,UAApB;AACA,MAAIC,YAAY,GAAG,6DAAnB;AACA,MAAIC,YAAY,GAAG,qGAAnB;AACA,MAAIrB,KAAK,GAAGmB,UAAU,CAAClB,KAAX,CAAiB,IAAjB,CAAZ;AACA,MAAIb,KAAK,GAAG,EAAZ;AACA,MAAIgB,KAAJ;;AACA,OAAK,IAAIW,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGf,KAAK,CAACO,MAAhC,EAAwCQ,IAAI,IAAI,CAAhD,EAAmD;AAC/C,QAAIV,OAAO,GAAG,IAAd;;AACA,QAAKD,KAAK,GAAGgB,YAAY,CAACZ,IAAb,CAAkBR,KAAK,CAACe,IAAD,CAAvB,CAAb,EAA8C;AAC1CV,MAAAA,OAAO,GAAG;AACNM,QAAAA,GAAG,EAAEP,KAAK,CAAC,CAAD,CADJ;AAENS,QAAAA,IAAI,EAAET,KAAK,CAAC,CAAD,CAFL;AAGNU,QAAAA,IAAI,EAAE,EAHA;AAINC,QAAAA,IAAI,EAAE,CAACX,KAAK,CAAC,CAAD,CAJN;AAKNY,QAAAA,MAAM,EAAE;AALF,OAAV;AAOH,KARD,MASK,IAAKZ,KAAK,GAAGiB,YAAY,CAACb,IAAb,CAAkBR,KAAK,CAACe,IAAD,CAAvB,CAAb,EAA8C;AAC/CV,MAAAA,OAAO,GAAG;AACNM,QAAAA,GAAG,EAAEP,KAAK,CAAC,CAAD,CADJ;AAENS,QAAAA,IAAI,EAAET,KAAK,CAAC,CAAD,CAAL,IAAYA,KAAK,CAAC,CAAD,CAFjB;AAGNU,QAAAA,IAAI,EAAEV,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,CAASH,KAAT,CAAe,GAAf,CAAX,GAAiC,EAHjC;AAINc,QAAAA,IAAI,EAAE,CAACX,KAAK,CAAC,CAAD,CAJN;AAKNY,QAAAA,MAAM,EAAE,CAACZ,KAAK,CAAC,CAAD;AALR,OAAV;AAOH;;AACD,QAAIC,OAAJ,EAAa;AACT,UAAI,CAACA,OAAO,CAACQ,IAAT,IAAiBR,OAAO,CAACU,IAA7B,EAAmC;AAC/BV,QAAAA,OAAO,CAACQ,IAAR,GAAelC,gBAAf;AACH;;AACDS,MAAAA,KAAK,CAAC8B,IAAN,CAAWb,OAAX;AACH;AACJ;;AACD,MAAI,CAACjB,KAAK,CAACmB,MAAX,EAAmB;AACf,WAAO,IAAP;AACH;;AACD,SAAO;AACHf,IAAAA,OAAO,EAAEK,cAAc,CAACV,EAAD,CADpB;AAEHW,IAAAA,IAAI,EAAEX,EAAE,CAACW,IAFN;AAGHV,IAAAA,KAAK,EAAEA;AAHJ,GAAP;AAKH;AACD;;;AACA,SAASM,SAAT,CAAmByB,UAAnB,EAA+B9B,OAA/B,EAAwC;AACpC,MAAI;AACA,WAAOX,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKyC,UAAL,CAAT,EAA2B;AAAE/B,MAAAA,KAAK,EAAE+B,UAAU,CAAC/B,KAAX,CAAiBkC,KAAjB,CAAuBjC,OAAvB;AAAT,KAA3B,CAAf;AACH,GAFD,CAGA,OAAOM,CAAP,EAAU;AACN,WAAOwB,UAAP;AACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAStB,cAAT,CAAwBV,EAAxB,EAA4B;AACxB,MAAIK,OAAO,GAAGL,EAAE,IAAIA,EAAE,CAACK,OAAvB;;AACA,MAAI,CAACA,OAAL,EAAc;AACV,WAAO,kBAAP;AACH;;AACD,MAAIA,OAAO,CAAC+B,KAAR,IAAiB,OAAO/B,OAAO,CAAC+B,KAAR,CAAc/B,OAArB,KAAiC,QAAtD,EAAgE;AAC5D,WAAOA,OAAO,CAAC+B,KAAR,CAAc/B,OAArB;AACH;;AACD,SAAOA,OAAP;AACH,C,CACD","sourcesContent":["/**\n * This was originally forked from https://github.com/occ/TraceKit, but has since been\n * largely modified and is now maintained as part of Sentry JS SDK.\n */\nimport { __assign } from \"tslib\";\n// global reference to slice\nvar UNKNOWN_FUNCTION = '?';\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\nvar chrome = /^\\s*at (?:(.*?) ?\\()?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nvar gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nvar winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nvar geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nvar chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nvar reactMinifiedRegexp = /Minified React error #\\d+;/i;\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function computeStackTrace(ex) {\n    var stack = null;\n    var popSize = 0;\n    if (ex) {\n        if (typeof ex.framesToPop === 'number') {\n            popSize = ex.framesToPop;\n        }\n        else if (reactMinifiedRegexp.test(ex.message)) {\n            popSize = 1;\n        }\n    }\n    try {\n        // This must be tried first because Opera 10 *destroys*\n        // its stacktrace property if you try to access the stack\n        // property first!!\n        stack = computeStackTraceFromStacktraceProp(ex);\n        if (stack) {\n            return popFrames(stack, popSize);\n        }\n    }\n    catch (e) {\n        // no-empty\n    }\n    try {\n        stack = computeStackTraceFromStackProp(ex);\n        if (stack) {\n            return popFrames(stack, popSize);\n        }\n    }\n    catch (e) {\n        // no-empty\n    }\n    return {\n        message: extractMessage(ex),\n        name: ex && ex.name,\n        stack: [],\n        failed: true,\n    };\n}\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, complexity\nfunction computeStackTraceFromStackProp(ex) {\n    if (!ex || !ex.stack) {\n        return null;\n    }\n    var stack = [];\n    var lines = ex.stack.split('\\n');\n    var isEval;\n    var submatch;\n    var parts;\n    var element;\n    for (var i = 0; i < lines.length; ++i) {\n        if ((parts = chrome.exec(lines[i]))) {\n            var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n            isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n            if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n                // throw out eval line/column and use top-most line/column number\n                parts[2] = submatch[1]; // url\n                parts[3] = submatch[2]; // line\n                parts[4] = submatch[3]; // column\n            }\n            element = {\n                // working with the regexp above is super painful. it is quite a hack, but just stripping the `address at `\n                // prefix here seems like the quickest solution for now.\n                url: parts[2] && parts[2].indexOf('address at ') === 0 ? parts[2].substr('address at '.length) : parts[2],\n                func: parts[1] || UNKNOWN_FUNCTION,\n                args: isNative ? [parts[2]] : [],\n                line: parts[3] ? +parts[3] : null,\n                column: parts[4] ? +parts[4] : null,\n            };\n        }\n        else if ((parts = winjs.exec(lines[i]))) {\n            element = {\n                url: parts[2],\n                func: parts[1] || UNKNOWN_FUNCTION,\n                args: [],\n                line: +parts[3],\n                column: parts[4] ? +parts[4] : null,\n            };\n        }\n        else if ((parts = gecko.exec(lines[i]))) {\n            isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n            if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n                // throw out eval line/column and use top-most line number\n                parts[1] = parts[1] || \"eval\";\n                parts[3] = submatch[1];\n                parts[4] = submatch[2];\n                parts[5] = ''; // no column when eval\n            }\n            else if (i === 0 && !parts[5] && ex.columnNumber !== void 0) {\n                // FireFox uses this awesome columnNumber property for its top frame\n                // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n                // so adding 1\n                // NOTE: this hack doesn't work if top-most frame is eval\n                stack[0].column = ex.columnNumber + 1;\n            }\n            element = {\n                url: parts[3],\n                func: parts[1] || UNKNOWN_FUNCTION,\n                args: parts[2] ? parts[2].split(',') : [],\n                line: parts[4] ? +parts[4] : null,\n                column: parts[5] ? +parts[5] : null,\n            };\n        }\n        else {\n            continue;\n        }\n        if (!element.func && element.line) {\n            element.func = UNKNOWN_FUNCTION;\n        }\n        stack.push(element);\n    }\n    if (!stack.length) {\n        return null;\n    }\n    return {\n        message: extractMessage(ex),\n        name: ex.name,\n        stack: stack,\n    };\n}\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction computeStackTraceFromStacktraceProp(ex) {\n    if (!ex || !ex.stacktrace) {\n        return null;\n    }\n    // Access and store the stacktrace property before doing ANYTHING\n    // else to it because Opera is not very good at providing it\n    // reliably in other circumstances.\n    var stacktrace = ex.stacktrace;\n    var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n    var opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\((.*)\\))? in (.*):\\s*$/i;\n    var lines = stacktrace.split('\\n');\n    var stack = [];\n    var parts;\n    for (var line = 0; line < lines.length; line += 2) {\n        var element = null;\n        if ((parts = opera10Regex.exec(lines[line]))) {\n            element = {\n                url: parts[2],\n                func: parts[3],\n                args: [],\n                line: +parts[1],\n                column: null,\n            };\n        }\n        else if ((parts = opera11Regex.exec(lines[line]))) {\n            element = {\n                url: parts[6],\n                func: parts[3] || parts[4],\n                args: parts[5] ? parts[5].split(',') : [],\n                line: +parts[1],\n                column: +parts[2],\n            };\n        }\n        if (element) {\n            if (!element.func && element.line) {\n                element.func = UNKNOWN_FUNCTION;\n            }\n            stack.push(element);\n        }\n    }\n    if (!stack.length) {\n        return null;\n    }\n    return {\n        message: extractMessage(ex),\n        name: ex.name,\n        stack: stack,\n    };\n}\n/** Remove N number of frames from the stack */\nfunction popFrames(stacktrace, popSize) {\n    try {\n        return __assign(__assign({}, stacktrace), { stack: stacktrace.stack.slice(popSize) });\n    }\n    catch (e) {\n        return stacktrace;\n    }\n}\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction extractMessage(ex) {\n    var message = ex && ex.message;\n    if (!message) {\n        return 'No error message';\n    }\n    if (message.error && typeof message.error.message === 'string') {\n        return message.error.message;\n    }\n    return message;\n}\n//# sourceMappingURL=tracekit.js.map"]},"metadata":{},"sourceType":"module"}
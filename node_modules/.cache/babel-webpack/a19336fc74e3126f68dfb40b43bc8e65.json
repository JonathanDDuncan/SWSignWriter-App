{"ast":null,"code":"'use strict';\n\nvar ec = require('./ec'),\n    rsa = require('./rsa');\n/**\n *\n * @param {{kty:'EC', crv:string, d:string, x?:string, y?:string} | {kty:'EC', crv:string, x:string, y:string} | {kty:'RSA', e:string, n:string, d?:string, p?:string, q?:string, dp?:string, dq?:string, qi?:string}} jwk\n * @param {{private:boolean}=} opts\n * @returns {string}\n */\n\n\nfunction jwkToBuffer(jwk, opts) {\n  if ('object' !== typeof jwk || null === jwk) {\n    throw new TypeError('Expected \"jwk\" to be an Object');\n  }\n\n  var kty = jwk.kty;\n\n  if ('string' !== typeof kty) {\n    throw new TypeError('Expected \"jwk.kty\" to be a String');\n  }\n\n  opts = opts || {};\n  opts.private = opts.private === true;\n\n  switch (kty) {\n    case 'EC':\n      {\n        return ec(jwk, opts);\n      }\n\n    case 'RSA':\n      {\n        return rsa(jwk, opts);\n      }\n\n    default:\n      {\n        throw new Error('Unsupported key type \"' + kty + '\"');\n      }\n  }\n}\n\nmodule.exports = jwkToBuffer;","map":{"version":3,"sources":["C:/Users/Fernando Martinez/Documents/Programacion/SignWriter/Frontend JD/node_modules/jwk-to-pem/src/jwk-to-pem.js"],"names":["ec","require","rsa","jwkToBuffer","jwk","opts","TypeError","kty","private","Error","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,MAAD,CAAhB;AAAA,IACCC,GAAG,GAAGD,OAAO,CAAC,OAAD,CADd;AAGA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,WAAT,CAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AAC/B,MAAI,aAAa,OAAOD,GAApB,IAA2B,SAASA,GAAxC,EAA6C;AAC5C,UAAM,IAAIE,SAAJ,CAAc,gCAAd,CAAN;AACA;;AAED,MAAIC,GAAG,GAAGH,GAAG,CAACG,GAAd;;AACA,MAAI,aAAa,OAAOA,GAAxB,EAA6B;AAC5B,UAAM,IAAID,SAAJ,CAAc,mCAAd,CAAN;AACA;;AAEDD,EAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACAA,EAAAA,IAAI,CAACG,OAAL,GAAeH,IAAI,CAACG,OAAL,KAAiB,IAAhC;;AAEA,UAAQD,GAAR;AACC,SAAK,IAAL;AAAW;AACV,eAAOP,EAAE,CAACI,GAAD,EAAMC,IAAN,CAAT;AACA;;AACD,SAAK,KAAL;AAAY;AACX,eAAOH,GAAG,CAACE,GAAD,EAAMC,IAAN,CAAV;AACA;;AACD;AAAS;AACR,cAAM,IAAII,KAAJ,CAAU,2BAA2BF,GAA3B,GAAiC,GAA3C,CAAN;AACA;AATF;AAWA;;AAEDG,MAAM,CAACC,OAAP,GAAiBR,WAAjB","sourcesContent":["'use strict';\n\nvar ec = require('./ec'),\n\trsa = require('./rsa');\n\n/**\n *\n * @param {{kty:'EC', crv:string, d:string, x?:string, y?:string} | {kty:'EC', crv:string, x:string, y:string} | {kty:'RSA', e:string, n:string, d?:string, p?:string, q?:string, dp?:string, dq?:string, qi?:string}} jwk\n * @param {{private:boolean}=} opts\n * @returns {string}\n */\nfunction jwkToBuffer(jwk, opts) {\n\tif ('object' !== typeof jwk || null === jwk) {\n\t\tthrow new TypeError('Expected \"jwk\" to be an Object');\n\t}\n\n\tvar kty = jwk.kty;\n\tif ('string' !== typeof kty) {\n\t\tthrow new TypeError('Expected \"jwk.kty\" to be a String');\n\t}\n\n\topts = opts || {};\n\topts.private = opts.private === true;\n\n\tswitch (kty) {\n\t\tcase 'EC': {\n\t\t\treturn ec(jwk, opts);\n\t\t}\n\t\tcase 'RSA': {\n\t\t\treturn rsa(jwk, opts);\n\t\t}\n\t\tdefault: {\n\t\t\tthrow new Error('Unsupported key type \"' + kty + '\"');\n\t\t}\n\t}\n}\n\nmodule.exports = jwkToBuffer;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import { isRegExp, isString } from './is';\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\n\nexport function truncate(str, max) {\n  if (max === void 0) {\n    max = 0;\n  }\n\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n\n  return str.length <= max ? str : str.substr(0, max) + \"...\";\n}\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\n\nexport function snipLine(line, colno) {\n  var newLine = line;\n  var ll = newLine.length;\n\n  if (ll <= 150) {\n    return newLine;\n  }\n\n  if (colno > ll) {\n    // eslint-disable-next-line no-param-reassign\n    colno = ll;\n  }\n\n  var start = Math.max(colno - 60, 0);\n\n  if (start < 5) {\n    start = 0;\n  }\n\n  var end = Math.min(start + 140, ll);\n\n  if (end > ll - 5) {\n    end = ll;\n  }\n\n  if (end === ll) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n\n  if (start > 0) {\n    newLine = \"'{snip} \" + newLine;\n  }\n\n  if (end < ll) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nexport function safeJoin(input, delimiter) {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  var output = []; // eslint-disable-next-line @typescript-eslint/prefer-for-of\n\n  for (var i = 0; i < input.length; i++) {\n    var value = input[i];\n\n    try {\n      output.push(String(value));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n/**\n * Checks if the value matches a regex or includes the string\n * @param value The string value to be checked against\n * @param pattern Either a regex or a string that must be contained in value\n */\n\nexport function isMatchingPattern(value, pattern) {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n\n  if (typeof pattern === 'string') {\n    return value.indexOf(pattern) !== -1;\n  }\n\n  return false;\n} //# sourceMappingURL=string.js.map","map":{"version":3,"sources":["C:/Users/Fernando Martinez/Documents/Programacion/SignWriter/Frontend JD/node_modules/@sentry/utils/esm/string.js"],"names":["isRegExp","isString","truncate","str","max","length","substr","snipLine","line","colno","newLine","ll","start","Math","end","min","slice","safeJoin","input","delimiter","Array","isArray","output","i","value","push","String","e","join","isMatchingPattern","pattern","test","indexOf"],"mappings":"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","sourcesContent":["import { isRegExp, isString } from './is';\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nexport function truncate(str, max) {\n    if (max === void 0) { max = 0; }\n    if (typeof str !== 'string' || max === 0) {\n        return str;\n    }\n    return str.length <= max ? str : str.substr(0, max) + \"...\";\n}\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function snipLine(line, colno) {\n    var newLine = line;\n    var ll = newLine.length;\n    if (ll <= 150) {\n        return newLine;\n    }\n    if (colno > ll) {\n        // eslint-disable-next-line no-param-reassign\n        colno = ll;\n    }\n    var start = Math.max(colno - 60, 0);\n    if (start < 5) {\n        start = 0;\n    }\n    var end = Math.min(start + 140, ll);\n    if (end > ll - 5) {\n        end = ll;\n    }\n    if (end === ll) {\n        start = Math.max(end - 140, 0);\n    }\n    newLine = newLine.slice(start, end);\n    if (start > 0) {\n        newLine = \"'{snip} \" + newLine;\n    }\n    if (end < ll) {\n        newLine += ' {snip}';\n    }\n    return newLine;\n}\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function safeJoin(input, delimiter) {\n    if (!Array.isArray(input)) {\n        return '';\n    }\n    var output = [];\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (var i = 0; i < input.length; i++) {\n        var value = input[i];\n        try {\n            output.push(String(value));\n        }\n        catch (e) {\n            output.push('[value cannot be serialized]');\n        }\n    }\n    return output.join(delimiter);\n}\n/**\n * Checks if the value matches a regex or includes the string\n * @param value The string value to be checked against\n * @param pattern Either a regex or a string that must be contained in value\n */\nexport function isMatchingPattern(value, pattern) {\n    if (!isString(value)) {\n        return false;\n    }\n    if (isRegExp(pattern)) {\n        return pattern.test(value);\n    }\n    if (typeof pattern === 'string') {\n        return value.indexOf(pattern) !== -1;\n    }\n    return false;\n}\n//# sourceMappingURL=string.js.map"]},"metadata":{},"sourceType":"module"}
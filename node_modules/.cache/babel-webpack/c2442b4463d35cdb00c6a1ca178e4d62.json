{"ast":null,"code":"import { Dsn, urlEncode } from '@sentry/utils';\nvar SENTRY_API_VERSION = '7';\n/** Helper class to provide urls to different Sentry endpoints. */\n\nvar API =\n/** @class */\nfunction () {\n  /** Create a new instance of API */\n  function API(dsn) {\n    this.dsn = dsn;\n    this._dsnObject = new Dsn(dsn);\n  }\n  /** Returns the Dsn object. */\n\n\n  API.prototype.getDsn = function () {\n    return this._dsnObject;\n  };\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n\n\n  API.prototype.getBaseApiEndpoint = function () {\n    var dsn = this._dsnObject;\n    var protocol = dsn.protocol ? dsn.protocol + \":\" : '';\n    var port = dsn.port ? \":\" + dsn.port : '';\n    return protocol + \"//\" + dsn.host + port + (dsn.path ? \"/\" + dsn.path : '') + \"/api/\";\n  };\n  /** Returns the store endpoint URL. */\n\n\n  API.prototype.getStoreEndpoint = function () {\n    return this._getIngestEndpoint('store');\n  };\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n\n\n  API.prototype.getStoreEndpointWithUrlEncodedAuth = function () {\n    return this.getStoreEndpoint() + \"?\" + this._encodedAuth();\n  };\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n\n\n  API.prototype.getEnvelopeEndpointWithUrlEncodedAuth = function () {\n    return this._getEnvelopeEndpoint() + \"?\" + this._encodedAuth();\n  };\n  /** Returns only the path component for the store endpoint. */\n\n\n  API.prototype.getStoreEndpointPath = function () {\n    var dsn = this._dsnObject;\n    return (dsn.path ? \"/\" + dsn.path : '') + \"/api/\" + dsn.projectId + \"/store/\";\n  };\n  /**\n   * Returns an object that can be used in request headers.\n   * This is needed for node and the old /store endpoint in sentry\n   */\n\n\n  API.prototype.getRequestHeaders = function (clientName, clientVersion) {\n    var dsn = this._dsnObject;\n    var header = [\"Sentry sentry_version=\" + SENTRY_API_VERSION];\n    header.push(\"sentry_client=\" + clientName + \"/\" + clientVersion);\n    header.push(\"sentry_key=\" + dsn.user);\n\n    if (dsn.pass) {\n      header.push(\"sentry_secret=\" + dsn.pass);\n    }\n\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', ')\n    };\n  };\n  /** Returns the url to the report dialog endpoint. */\n\n\n  API.prototype.getReportDialogEndpoint = function (dialogOptions) {\n    if (dialogOptions === void 0) {\n      dialogOptions = {};\n    }\n\n    var dsn = this._dsnObject;\n    var endpoint = this.getBaseApiEndpoint() + \"embed/error-page/\";\n    var encodedOptions = [];\n    encodedOptions.push(\"dsn=\" + dsn.toString());\n\n    for (var key in dialogOptions) {\n      if (key === 'dsn') {\n        continue;\n      }\n\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n\n        if (dialogOptions.user.name) {\n          encodedOptions.push(\"name=\" + encodeURIComponent(dialogOptions.user.name));\n        }\n\n        if (dialogOptions.user.email) {\n          encodedOptions.push(\"email=\" + encodeURIComponent(dialogOptions.user.email));\n        }\n      } else {\n        encodedOptions.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(dialogOptions[key]));\n      }\n    }\n\n    if (encodedOptions.length) {\n      return endpoint + \"?\" + encodedOptions.join('&');\n    }\n\n    return endpoint;\n  };\n  /** Returns the envelope endpoint URL. */\n\n\n  API.prototype._getEnvelopeEndpoint = function () {\n    return this._getIngestEndpoint('envelope');\n  };\n  /** Returns the ingest API endpoint for target. */\n\n\n  API.prototype._getIngestEndpoint = function (target) {\n    var base = this.getBaseApiEndpoint();\n    var dsn = this._dsnObject;\n    return \"\" + base + dsn.projectId + \"/\" + target + \"/\";\n  };\n  /** Returns a URL-encoded string with auth config suitable for a query string. */\n\n\n  API.prototype._encodedAuth = function () {\n    var dsn = this._dsnObject;\n    var auth = {\n      // We send only the minimum set of required information. See\n      // https://github.com/getsentry/sentry-javascript/issues/2572.\n      sentry_key: dsn.user,\n      sentry_version: SENTRY_API_VERSION\n    };\n    return urlEncode(auth);\n  };\n\n  return API;\n}();\n\nexport { API }; //# sourceMappingURL=api.js.map","map":{"version":3,"sources":["C:/Users/Fernando Martinez/Documents/Programacion/SignWriter/Frontend JD/node_modules/@sentry/core/esm/api.js"],"names":["Dsn","urlEncode","SENTRY_API_VERSION","API","dsn","_dsnObject","prototype","getDsn","getBaseApiEndpoint","protocol","port","host","path","getStoreEndpoint","_getIngestEndpoint","getStoreEndpointWithUrlEncodedAuth","_encodedAuth","getEnvelopeEndpointWithUrlEncodedAuth","_getEnvelopeEndpoint","getStoreEndpointPath","projectId","getRequestHeaders","clientName","clientVersion","header","push","user","pass","join","getReportDialogEndpoint","dialogOptions","endpoint","encodedOptions","toString","key","name","encodeURIComponent","email","length","target","base","auth","sentry_key","sentry_version"],"mappings":"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","sourcesContent":["import { Dsn, urlEncode } from '@sentry/utils';\nvar SENTRY_API_VERSION = '7';\n/** Helper class to provide urls to different Sentry endpoints. */\nvar API = /** @class */ (function () {\n    /** Create a new instance of API */\n    function API(dsn) {\n        this.dsn = dsn;\n        this._dsnObject = new Dsn(dsn);\n    }\n    /** Returns the Dsn object. */\n    API.prototype.getDsn = function () {\n        return this._dsnObject;\n    };\n    /** Returns the prefix to construct Sentry ingestion API endpoints. */\n    API.prototype.getBaseApiEndpoint = function () {\n        var dsn = this._dsnObject;\n        var protocol = dsn.protocol ? dsn.protocol + \":\" : '';\n        var port = dsn.port ? \":\" + dsn.port : '';\n        return protocol + \"//\" + dsn.host + port + (dsn.path ? \"/\" + dsn.path : '') + \"/api/\";\n    };\n    /** Returns the store endpoint URL. */\n    API.prototype.getStoreEndpoint = function () {\n        return this._getIngestEndpoint('store');\n    };\n    /**\n     * Returns the store endpoint URL with auth in the query string.\n     *\n     * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n     */\n    API.prototype.getStoreEndpointWithUrlEncodedAuth = function () {\n        return this.getStoreEndpoint() + \"?\" + this._encodedAuth();\n    };\n    /**\n     * Returns the envelope endpoint URL with auth in the query string.\n     *\n     * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n     */\n    API.prototype.getEnvelopeEndpointWithUrlEncodedAuth = function () {\n        return this._getEnvelopeEndpoint() + \"?\" + this._encodedAuth();\n    };\n    /** Returns only the path component for the store endpoint. */\n    API.prototype.getStoreEndpointPath = function () {\n        var dsn = this._dsnObject;\n        return (dsn.path ? \"/\" + dsn.path : '') + \"/api/\" + dsn.projectId + \"/store/\";\n    };\n    /**\n     * Returns an object that can be used in request headers.\n     * This is needed for node and the old /store endpoint in sentry\n     */\n    API.prototype.getRequestHeaders = function (clientName, clientVersion) {\n        var dsn = this._dsnObject;\n        var header = [\"Sentry sentry_version=\" + SENTRY_API_VERSION];\n        header.push(\"sentry_client=\" + clientName + \"/\" + clientVersion);\n        header.push(\"sentry_key=\" + dsn.user);\n        if (dsn.pass) {\n            header.push(\"sentry_secret=\" + dsn.pass);\n        }\n        return {\n            'Content-Type': 'application/json',\n            'X-Sentry-Auth': header.join(', '),\n        };\n    };\n    /** Returns the url to the report dialog endpoint. */\n    API.prototype.getReportDialogEndpoint = function (dialogOptions) {\n        if (dialogOptions === void 0) { dialogOptions = {}; }\n        var dsn = this._dsnObject;\n        var endpoint = this.getBaseApiEndpoint() + \"embed/error-page/\";\n        var encodedOptions = [];\n        encodedOptions.push(\"dsn=\" + dsn.toString());\n        for (var key in dialogOptions) {\n            if (key === 'dsn') {\n                continue;\n            }\n            if (key === 'user') {\n                if (!dialogOptions.user) {\n                    continue;\n                }\n                if (dialogOptions.user.name) {\n                    encodedOptions.push(\"name=\" + encodeURIComponent(dialogOptions.user.name));\n                }\n                if (dialogOptions.user.email) {\n                    encodedOptions.push(\"email=\" + encodeURIComponent(dialogOptions.user.email));\n                }\n            }\n            else {\n                encodedOptions.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(dialogOptions[key]));\n            }\n        }\n        if (encodedOptions.length) {\n            return endpoint + \"?\" + encodedOptions.join('&');\n        }\n        return endpoint;\n    };\n    /** Returns the envelope endpoint URL. */\n    API.prototype._getEnvelopeEndpoint = function () {\n        return this._getIngestEndpoint('envelope');\n    };\n    /** Returns the ingest API endpoint for target. */\n    API.prototype._getIngestEndpoint = function (target) {\n        var base = this.getBaseApiEndpoint();\n        var dsn = this._dsnObject;\n        return \"\" + base + dsn.projectId + \"/\" + target + \"/\";\n    };\n    /** Returns a URL-encoded string with auth config suitable for a query string. */\n    API.prototype._encodedAuth = function () {\n        var dsn = this._dsnObject;\n        var auth = {\n            // We send only the minimum set of required information. See\n            // https://github.com/getsentry/sentry-javascript/issues/2572.\n            sentry_key: dsn.user,\n            sentry_version: SENTRY_API_VERSION,\n        };\n        return urlEncode(auth);\n    };\n    return API;\n}());\nexport { API };\n//# sourceMappingURL=api.js.map"]},"metadata":{},"sourceType":"module"}
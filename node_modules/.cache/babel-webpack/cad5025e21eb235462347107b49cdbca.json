{"ast":null,"code":"import { __assign, __extends, __read, __spread } from \"tslib\";\nimport { BaseClient } from '@sentry/core';\nimport { getGlobalObject, logger } from '@sentry/utils';\nimport { BrowserBackend } from './backend';\nimport { injectReportDialog } from './helpers';\nimport { Breadcrumbs } from './integrations';\nimport { SDK_NAME, SDK_VERSION } from './version';\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\n\nvar BrowserClient =\n/** @class */\nfunction (_super) {\n  __extends(BrowserClient, _super);\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n\n\n  function BrowserClient(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _super.call(this, BrowserBackend, options) || this;\n  }\n  /**\n   * Show a report dialog to the user to send feedback to a specific event.\n   *\n   * @param options Set individual options for the dialog\n   */\n\n\n  BrowserClient.prototype.showReportDialog = function (options) {\n    if (options === void 0) {\n      options = {};\n    } // doesn't work without a document (React Native)\n\n\n    var document = getGlobalObject().document;\n\n    if (!document) {\n      return;\n    }\n\n    if (!this._isEnabled()) {\n      logger.error('Trying to call showReportDialog with Sentry Client disabled');\n      return;\n    }\n\n    injectReportDialog(__assign(__assign({}, options), {\n      dsn: options.dsn || this.getDsn()\n    }));\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserClient.prototype._prepareEvent = function (event, scope, hint) {\n    event.platform = event.platform || 'javascript';\n    event.sdk = __assign(__assign({}, event.sdk), {\n      name: SDK_NAME,\n      packages: __spread(event.sdk && event.sdk.packages || [], [{\n        name: 'npm:@sentry/browser',\n        version: SDK_VERSION\n      }]),\n      version: SDK_VERSION\n    });\n    return _super.prototype._prepareEvent.call(this, event, scope, hint);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserClient.prototype._sendEvent = function (event) {\n    var integration = this.getIntegration(Breadcrumbs);\n\n    if (integration) {\n      integration.addSentryBreadcrumb(event);\n    }\n\n    _super.prototype._sendEvent.call(this, event);\n  };\n\n  return BrowserClient;\n}(BaseClient);\n\nexport { BrowserClient }; //# sourceMappingURL=client.js.map","map":{"version":3,"sources":["C:/Users/Fernando Martinez/Documents/Programacion/SignWriter/Frontend JD/node_modules/@sentry/browser/esm/client.js"],"names":["__assign","__extends","__read","__spread","BaseClient","getGlobalObject","logger","BrowserBackend","injectReportDialog","Breadcrumbs","SDK_NAME","SDK_VERSION","BrowserClient","_super","options","call","prototype","showReportDialog","document","_isEnabled","error","dsn","getDsn","_prepareEvent","event","scope","hint","platform","sdk","name","packages","version","_sendEvent","integration","getIntegration","addSentryBreadcrumb"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,eAAT,EAA0BC,MAA1B,QAAwC,eAAxC;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,kBAAT,QAAmC,WAAnC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,WAAtC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,aAAa;AAAG;AAAe,UAAUC,MAAV,EAAkB;AACjDZ,EAAAA,SAAS,CAACW,aAAD,EAAgBC,MAAhB,CAAT;AACA;AACJ;AACA;AACA;AACA;;;AACI,WAASD,aAAT,CAAuBE,OAAvB,EAAgC;AAC5B,QAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,MAAAA,OAAO,GAAG,EAAV;AAAe;;AACzC,WAAOD,MAAM,CAACE,IAAP,CAAY,IAAZ,EAAkBR,cAAlB,EAAkCO,OAAlC,KAA8C,IAArD;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIF,EAAAA,aAAa,CAACI,SAAd,CAAwBC,gBAAxB,GAA2C,UAAUH,OAAV,EAAmB;AAC1D,QAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,MAAAA,OAAO,GAAG,EAAV;AAAe,KADiB,CAE1D;;;AACA,QAAII,QAAQ,GAAGb,eAAe,GAAGa,QAAjC;;AACA,QAAI,CAACA,QAAL,EAAe;AACX;AACH;;AACD,QAAI,CAAC,KAAKC,UAAL,EAAL,EAAwB;AACpBb,MAAAA,MAAM,CAACc,KAAP,CAAa,6DAAb;AACA;AACH;;AACDZ,IAAAA,kBAAkB,CAACR,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKc,OAAL,CAAT,EAAwB;AAAEO,MAAAA,GAAG,EAAEP,OAAO,CAACO,GAAR,IAAe,KAAKC,MAAL;AAAtB,KAAxB,CAAT,CAAlB;AACH,GAZD;AAaA;AACJ;AACA;;;AACIV,EAAAA,aAAa,CAACI,SAAd,CAAwBO,aAAxB,GAAwC,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,IAAxB,EAA8B;AAClEF,IAAAA,KAAK,CAACG,QAAN,GAAiBH,KAAK,CAACG,QAAN,IAAkB,YAAnC;AACAH,IAAAA,KAAK,CAACI,GAAN,GAAY5B,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKwB,KAAK,CAACI,GAAX,CAAT,EAA0B;AAAEC,MAAAA,IAAI,EAAEnB,QAAR;AAAkBoB,MAAAA,QAAQ,EAAE3B,QAAQ,CAAGqB,KAAK,CAACI,GAAN,IAAaJ,KAAK,CAACI,GAAN,CAAUE,QAAxB,IAAqC,EAAvC,EAA4C,CACtH;AACID,QAAAA,IAAI,EAAE,qBADV;AAEIE,QAAAA,OAAO,EAAEpB;AAFb,OADsH,CAA5C,CAApC;AAKtCoB,MAAAA,OAAO,EAAEpB;AAL6B,KAA1B,CAApB;AAMA,WAAOE,MAAM,CAACG,SAAP,CAAiBO,aAAjB,CAA+BR,IAA/B,CAAoC,IAApC,EAA0CS,KAA1C,EAAiDC,KAAjD,EAAwDC,IAAxD,CAAP;AACH,GATD;AAUA;AACJ;AACA;;;AACId,EAAAA,aAAa,CAACI,SAAd,CAAwBgB,UAAxB,GAAqC,UAAUR,KAAV,EAAiB;AAClD,QAAIS,WAAW,GAAG,KAAKC,cAAL,CAAoBzB,WAApB,CAAlB;;AACA,QAAIwB,WAAJ,EAAiB;AACbA,MAAAA,WAAW,CAACE,mBAAZ,CAAgCX,KAAhC;AACH;;AACDX,IAAAA,MAAM,CAACG,SAAP,CAAiBgB,UAAjB,CAA4BjB,IAA5B,CAAiC,IAAjC,EAAuCS,KAAvC;AACH,GAND;;AAOA,SAAOZ,aAAP;AACH,CArDkC,CAqDjCR,UArDiC,CAAnC;;AAsDA,SAASQ,aAAT,G,CACA","sourcesContent":["import { __assign, __extends, __read, __spread } from \"tslib\";\nimport { BaseClient } from '@sentry/core';\nimport { getGlobalObject, logger } from '@sentry/utils';\nimport { BrowserBackend } from './backend';\nimport { injectReportDialog } from './helpers';\nimport { Breadcrumbs } from './integrations';\nimport { SDK_NAME, SDK_VERSION } from './version';\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nvar BrowserClient = /** @class */ (function (_super) {\n    __extends(BrowserClient, _super);\n    /**\n     * Creates a new Browser SDK instance.\n     *\n     * @param options Configuration options for this SDK.\n     */\n    function BrowserClient(options) {\n        if (options === void 0) { options = {}; }\n        return _super.call(this, BrowserBackend, options) || this;\n    }\n    /**\n     * Show a report dialog to the user to send feedback to a specific event.\n     *\n     * @param options Set individual options for the dialog\n     */\n    BrowserClient.prototype.showReportDialog = function (options) {\n        if (options === void 0) { options = {}; }\n        // doesn't work without a document (React Native)\n        var document = getGlobalObject().document;\n        if (!document) {\n            return;\n        }\n        if (!this._isEnabled()) {\n            logger.error('Trying to call showReportDialog with Sentry Client disabled');\n            return;\n        }\n        injectReportDialog(__assign(__assign({}, options), { dsn: options.dsn || this.getDsn() }));\n    };\n    /**\n     * @inheritDoc\n     */\n    BrowserClient.prototype._prepareEvent = function (event, scope, hint) {\n        event.platform = event.platform || 'javascript';\n        event.sdk = __assign(__assign({}, event.sdk), { name: SDK_NAME, packages: __spread(((event.sdk && event.sdk.packages) || []), [\n                {\n                    name: 'npm:@sentry/browser',\n                    version: SDK_VERSION,\n                },\n            ]), version: SDK_VERSION });\n        return _super.prototype._prepareEvent.call(this, event, scope, hint);\n    };\n    /**\n     * @inheritDoc\n     */\n    BrowserClient.prototype._sendEvent = function (event) {\n        var integration = this.getIntegration(Breadcrumbs);\n        if (integration) {\n            integration.addSentryBreadcrumb(event);\n        }\n        _super.prototype._sendEvent.call(this, event);\n    };\n    return BrowserClient;\n}(BaseClient));\nexport { BrowserClient };\n//# sourceMappingURL=client.js.map"]},"metadata":{},"sourceType":"module"}
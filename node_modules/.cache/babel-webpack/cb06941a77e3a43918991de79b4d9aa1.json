{"ast":null,"code":"import { getGlobalObject } from './misc';\nimport { dynamicRequire, isNodeEnv } from './node';\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\n\nvar dateTimestampSource = {\n  nowSeconds: function nowSeconds() {\n    return Date.now() / 1000;\n  }\n};\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\n\nfunction getBrowserPerformance() {\n  var performance = getGlobalObject().performance;\n\n  if (!performance || !performance.now) {\n    return undefined;\n  } // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n  //\n  // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n  // performance.now() gives a date arbitrarily in the past.\n  //\n  // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n  // undefined.\n  //\n  // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n  // interact with data coming out of performance entries.\n  //\n  // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n  // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n  // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n  // observed skews that can be as long as days, weeks or months.\n  //\n  // See https://github.com/getsentry/sentry-javascript/issues/2590.\n  //\n  // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n  // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n  // transactions of long-lived web pages.\n\n\n  var timeOrigin = Date.now() - performance.now();\n  return {\n    now: function now() {\n      return performance.now();\n    },\n    timeOrigin: timeOrigin\n  };\n}\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\n\n\nfunction getNodePerformance() {\n  try {\n    var perfHooks = dynamicRequire(module, 'perf_hooks');\n    return perfHooks.performance;\n  } catch (_) {\n    return undefined;\n  }\n}\n/**\n * The Performance API implementation for the current platform, if available.\n */\n\n\nvar platformPerformance = isNodeEnv() ? getNodePerformance() : getBrowserPerformance();\nvar timestampSource = platformPerformance === undefined ? dateTimestampSource : {\n  nowSeconds: function nowSeconds() {\n    return (platformPerformance.timeOrigin + platformPerformance.now()) / 1000;\n  }\n};\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\n\nexport var dateTimestampInSeconds = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\n\nexport var timestampInSeconds = timestampSource.nowSeconds.bind(timestampSource); // Re-exported with an old name for backwards-compatibility.\n\nexport var timestampWithMs = timestampInSeconds;\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\n\nexport var usingPerformanceAPI = platformPerformance !== undefined;\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\n\nexport var browserPerformanceTimeOrigin = function () {\n  var performance = getGlobalObject().performance;\n\n  if (!performance) {\n    return undefined;\n  }\n\n  if (performance.timeOrigin) {\n    return performance.timeOrigin;\n  } // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n\n\n  return performance.timing && performance.timing.navigationStart || Date.now();\n}(); //# sourceMappingURL=time.js.map","map":{"version":3,"sources":["C:/Users/Fernando Martinez/Documents/Programacion/SignWriter/Frontend JD/node_modules/@sentry/utils/esm/time.js"],"names":["getGlobalObject","dynamicRequire","isNodeEnv","dateTimestampSource","nowSeconds","Date","now","getBrowserPerformance","performance","undefined","timeOrigin","getNodePerformance","perfHooks","module","_","platformPerformance","timestampSource","dateTimestampInSeconds","bind","timestampInSeconds","timestampWithMs","usingPerformanceAPI","browserPerformanceTimeOrigin","timing","navigationStart"],"mappings":"AAAA,SAASA,eAAT,QAAgC,QAAhC;AACA,SAASC,cAAT,EAAyBC,SAAzB,QAA0C,QAA1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,mBAAmB,GAAG;AACtBC,EAAAA,UAAU,EAAE,sBAAY;AAAE,WAAOC,IAAI,CAACC,GAAL,KAAa,IAApB;AAA2B;AAD/B,CAA1B;AAGA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,qBAAT,GAAiC;AAC7B,MAAIC,WAAW,GAAGR,eAAe,GAAGQ,WAApC;;AACA,MAAI,CAACA,WAAD,IAAgB,CAACA,WAAW,CAACF,GAAjC,EAAsC;AAClC,WAAOG,SAAP;AACH,GAJ4B,CAK7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIC,UAAU,GAAGL,IAAI,CAACC,GAAL,KAAaE,WAAW,CAACF,GAAZ,EAA9B;AACA,SAAO;AACHA,IAAAA,GAAG,EAAE,eAAY;AAAE,aAAOE,WAAW,CAACF,GAAZ,EAAP;AAA2B,KAD3C;AAEHI,IAAAA,UAAU,EAAEA;AAFT,GAAP;AAIH;AACD;AACA;AACA;AACA;;;AACA,SAASC,kBAAT,GAA8B;AAC1B,MAAI;AACA,QAAIC,SAAS,GAAGX,cAAc,CAACY,MAAD,EAAS,YAAT,CAA9B;AACA,WAAOD,SAAS,CAACJ,WAAjB;AACH,GAHD,CAIA,OAAOM,CAAP,EAAU;AACN,WAAOL,SAAP;AACH;AACJ;AACD;AACA;AACA;;;AACA,IAAIM,mBAAmB,GAAGb,SAAS,KAAKS,kBAAkB,EAAvB,GAA4BJ,qBAAqB,EAApF;AACA,IAAIS,eAAe,GAAGD,mBAAmB,KAAKN,SAAxB,GAChBN,mBADgB,GAEhB;AACEC,EAAAA,UAAU,EAAE,sBAAY;AAAE,WAAO,CAACW,mBAAmB,CAACL,UAApB,GAAiCK,mBAAmB,CAACT,GAApB,EAAlC,IAA+D,IAAtE;AAA6E;AADzG,CAFN;AAKA;AACA;AACA;;AACA,OAAO,IAAIW,sBAAsB,GAAGd,mBAAmB,CAACC,UAApB,CAA+Bc,IAA/B,CAAoCf,mBAApC,CAA7B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIgB,kBAAkB,GAAGH,eAAe,CAACZ,UAAhB,CAA2Bc,IAA3B,CAAgCF,eAAhC,CAAzB,C,CACP;;AACA,OAAO,IAAII,eAAe,GAAGD,kBAAtB;AACP;AACA;AACA;;AACA,OAAO,IAAIE,mBAAmB,GAAGN,mBAAmB,KAAKN,SAAlD;AACP;AACA;AACA;AACA;;AACA,OAAO,IAAIa,4BAA4B,GAAI,YAAY;AACnD,MAAId,WAAW,GAAGR,eAAe,GAAGQ,WAApC;;AACA,MAAI,CAACA,WAAL,EAAkB;AACd,WAAOC,SAAP;AACH;;AACD,MAAID,WAAW,CAACE,UAAhB,EAA4B;AACxB,WAAOF,WAAW,CAACE,UAAnB;AACH,GAPkD,CAQnD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAQF,WAAW,CAACe,MAAZ,IAAsBf,WAAW,CAACe,MAAZ,CAAmBC,eAA1C,IAA8DnB,IAAI,CAACC,GAAL,EAArE;AACH,CAfyC,EAAnC,C,CAgBP","sourcesContent":["import { getGlobalObject } from './misc';\nimport { dynamicRequire, isNodeEnv } from './node';\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\nvar dateTimestampSource = {\n    nowSeconds: function () { return Date.now() / 1000; },\n};\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction getBrowserPerformance() {\n    var performance = getGlobalObject().performance;\n    if (!performance || !performance.now) {\n        return undefined;\n    }\n    // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n    //\n    // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n    // performance.now() gives a date arbitrarily in the past.\n    //\n    // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n    // undefined.\n    //\n    // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n    // interact with data coming out of performance entries.\n    //\n    // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n    // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n    // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n    // observed skews that can be as long as days, weeks or months.\n    //\n    // See https://github.com/getsentry/sentry-javascript/issues/2590.\n    //\n    // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n    // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n    // transactions of long-lived web pages.\n    var timeOrigin = Date.now() - performance.now();\n    return {\n        now: function () { return performance.now(); },\n        timeOrigin: timeOrigin,\n    };\n}\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\nfunction getNodePerformance() {\n    try {\n        var perfHooks = dynamicRequire(module, 'perf_hooks');\n        return perfHooks.performance;\n    }\n    catch (_) {\n        return undefined;\n    }\n}\n/**\n * The Performance API implementation for the current platform, if available.\n */\nvar platformPerformance = isNodeEnv() ? getNodePerformance() : getBrowserPerformance();\nvar timestampSource = platformPerformance === undefined\n    ? dateTimestampSource\n    : {\n        nowSeconds: function () { return (platformPerformance.timeOrigin + platformPerformance.now()) / 1000; },\n    };\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nexport var dateTimestampInSeconds = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexport var timestampInSeconds = timestampSource.nowSeconds.bind(timestampSource);\n// Re-exported with an old name for backwards-compatibility.\nexport var timestampWithMs = timestampInSeconds;\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\nexport var usingPerformanceAPI = platformPerformance !== undefined;\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexport var browserPerformanceTimeOrigin = (function () {\n    var performance = getGlobalObject().performance;\n    if (!performance) {\n        return undefined;\n    }\n    if (performance.timeOrigin) {\n        return performance.timeOrigin;\n    }\n    // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n    // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n    // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n    // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n    // Date API.\n    // eslint-disable-next-line deprecation/deprecation\n    return (performance.timing && performance.timing.navigationStart) || Date.now();\n})();\n//# sourceMappingURL=time.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Fernando Martinez/Documents/Programacion/SignWriter/Frontend JD/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { StorageService } from '../storage.service';\nimport { SubscriptionService } from './subscription.service';\nimport { TrialService } from './trial.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../storage.service\";\nimport * as i2 from \"./subscription.service\";\nimport * as i3 from \"./trial.service\";\nexport class UserService {\n  constructor(storage, subscriptions, trial) {\n    this.storage = storage;\n    this.subscriptions = subscriptions;\n    this.trial = trial;\n  }\n\n  GetCurrenUserRoles() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const currentUserProfile = yield _this.storage.GetCurrentUserProfile();\n\n      if (currentUserProfile && currentUserProfile != null) {\n        const roles = yield _this.GetRoles(currentUserProfile.email);\n        return roles;\n      }\n    })();\n  }\n\n  GetRoles(email) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const trialDaysLeft = yield _this2.trial.GetTrialDaysLeft(email);\n      const subscriptionDaysLeft = yield _this2.subscriptions.GetSubscriptionDaysLeft(email);\n      const roles = [];\n\n      if (subscriptionDaysLeft && subscriptionDaysLeft > 0) {\n        roles.push('subscribed');\n      } else if (trialDaysLeft && trialDaysLeft > 0) {\n        roles.push('trial');\n      }\n\n      return roles;\n    })();\n  }\n\n}\n\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.StorageService), i0.ɵɵinject(i2.SubscriptionService), i0.ɵɵinject(i3.TrialService));\n};\n\nUserService.ɵprov = i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\Users\\Fernando Martinez\\Documents\\Programacion\\SignWriter\\Frontend JD\\src\\app\\services\\user.service.ts"],"names":[],"mappings":";AACA,SAAS,cAAT,QAA+B,oBAA/B;AACA,SAAS,mBAAT,QAAoC,wBAApC;AACA,SAAS,YAAT,QAA6B,iBAA7B;;;;;AAKA,OAAM,MAAO,WAAP,CAAkB;AAEtB,EAAA,WAAA,CACU,OADV,EAEU,aAFV,EAGU,KAHV,EAG6B;AAFnB,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,aAAA,GAAA,aAAA;AACA,SAAA,KAAA,GAAA,KAAA;AACL;;AAEC,EAAA,kBAAN,GAAwB;AAAA;;AAAA;AACtB,YAAM,kBAAkB,SAAS,KAAI,CAAC,OAAL,CAAa,qBAAb,EAAjC;;AACA,UAAI,kBAAkB,IAAI,kBAAkB,IAAI,IAAhD,EAAsD;AACpD,cAAM,KAAK,SAAS,KAAI,CAAC,QAAL,CAAc,kBAAkB,CAAC,KAAjC,CAApB;AACA,eAAO,KAAP;AACD;AALqB;AAMvB;;AAEa,EAAA,QAAN,CAAe,KAAf,EAA4B;AAAA;;AAAA;AAClC,YAAM,aAAa,SAAS,MAAI,CAAC,KAAL,CAAW,gBAAX,CAA4B,KAA5B,CAA5B;AACA,YAAM,oBAAoB,SAAS,MAAI,CAAC,aAAL,CAAmB,uBAAnB,CAA2C,KAA3C,CAAnC;AAEA,YAAM,KAAK,GAAa,EAAxB;;AAEA,UAAI,oBAAoB,IAAI,oBAAoB,GAAG,CAAnD,EAAsD;AACpD,QAAA,KAAK,CAAC,IAAN,CAAW,YAAX;AACD,OAFD,MAEO,IAAI,aAAa,IAAI,aAAa,GAAG,CAArC,EAAwC;AAC7C,QAAA,KAAK,CAAC,IAAN,CAAW,OAAX;AACD;;AACD,aAAO,KAAP;AAXkC;AAYnC;;AA5BqB;;;mBAAX,W,EAAW,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,cAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,mBAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,YAAA,C;AAAA,C;;;SAAX,W;AAAW,EAAA,OAAA,EAAX,WAAW,CAAA,I;AAAA,EAAA,UAAA,EAFV","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { StorageService } from '../storage.service';\r\nimport { SubscriptionService } from './subscription.service';\r\nimport { TrialService } from './trial.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n  constructor(\r\n    private storage: StorageService,\r\n    private subscriptions: SubscriptionService,\r\n    private trial: TrialService\r\n  ) { }\r\n\r\n  async GetCurrenUserRoles(): Promise<Array<string>> {\r\n    const currentUserProfile = await this.storage.GetCurrentUserProfile();\r\n    if (currentUserProfile && currentUserProfile != null) {\r\n      const roles = await this.GetRoles(currentUserProfile.email);\r\n      return roles;\r\n    }\r\n  }\r\n\r\n  private async GetRoles(email: string): Promise<string[]> {\r\n    const trialDaysLeft = await this.trial.GetTrialDaysLeft(email);\r\n    const subscriptionDaysLeft = await this.subscriptions.GetSubscriptionDaysLeft(email);\r\n\r\n    const roles: string[] = [];\r\n\r\n    if (subscriptionDaysLeft && subscriptionDaysLeft > 0) {\r\n      roles.push('subscribed');\r\n    } else if (trialDaysLeft && trialDaysLeft > 0) {\r\n      roles.push('trial');\r\n    }\r\n    return roles;\r\n  }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { getGlobalObject, SyncPromise } from '@sentry/utils';\nimport { BrowserClient } from './client';\nimport { wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, GlobalHandlers, LinkedErrors, TryCatch, UserAgent } from './integrations';\nexport var defaultIntegrations = [new CoreIntegrations.InboundFilters(), new CoreIntegrations.FunctionToString(), new TryCatch(), new Breadcrumbs(), new GlobalHandlers(), new LinkedErrors(), new UserAgent()];\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\n\nexport function init(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n\n  if (options.release === undefined) {\n    var window_1 = getGlobalObject(); // This supports the variable that sentry-webpack-plugin injects\n\n    if (window_1.SENTRY_RELEASE && window_1.SENTRY_RELEASE.id) {\n      options.release = window_1.SENTRY_RELEASE.id;\n    }\n  }\n\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = false;\n  }\n\n  initAndBind(BrowserClient, options);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\n\nexport function showReportDialog(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!options.eventId) {\n    options.eventId = getCurrentHub().lastEventId();\n  }\n\n  var client = getCurrentHub().getClient();\n\n  if (client) {\n    client.showReportDialog(options);\n  }\n}\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\n\nexport function lastEventId() {\n  return getCurrentHub().lastEventId();\n}\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\n\nexport function forceLoad() {// Noop\n}\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\n\nexport function onLoad(callback) {\n  callback();\n}\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\n\nexport function flush(timeout) {\n  var client = getCurrentHub().getClient();\n\n  if (client) {\n    return client.flush(timeout);\n  }\n\n  return SyncPromise.reject(false);\n}\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\n\nexport function close(timeout) {\n  var client = getCurrentHub().getClient();\n\n  if (client) {\n    return client.close(timeout);\n  }\n\n  return SyncPromise.reject(false);\n}\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nexport function wrap(fn) {\n  return internalWrap(fn)();\n}\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\n\nfunction startSessionTracking() {\n  var window = getGlobalObject();\n  var hub = getCurrentHub();\n  /**\n   * We should be using `Promise.all([windowLoaded, firstContentfulPaint])` here,\n   * but, as always, it's not available in the IE10-11. Thanks IE.\n   */\n\n  var loadResolved = document.readyState === 'complete';\n  var fcpResolved = false;\n\n  var possiblyEndSession = function possiblyEndSession() {\n    if (fcpResolved && loadResolved) {\n      hub.endSession();\n    }\n  };\n\n  var resolveWindowLoaded = function resolveWindowLoaded() {\n    loadResolved = true;\n    possiblyEndSession();\n    window.removeEventListener('load', resolveWindowLoaded);\n  };\n\n  hub.startSession();\n\n  if (!loadResolved) {\n    // IE doesn't support `{ once: true }` for event listeners, so we have to manually\n    // attach and then detach it once completed.\n    window.addEventListener('load', resolveWindowLoaded);\n  }\n\n  try {\n    var po = new PerformanceObserver(function (entryList, po) {\n      entryList.getEntries().forEach(function (entry) {\n        if (entry.name === 'first-contentful-paint' && entry.startTime < firstHiddenTime_1) {\n          po.disconnect();\n          fcpResolved = true;\n          possiblyEndSession();\n        }\n      });\n    }); // There's no need to even attach this listener if `PerformanceObserver` constructor will fail,\n    // so we do it below here.\n\n    var firstHiddenTime_1 = document.visibilityState === 'hidden' ? 0 : Infinity;\n    document.addEventListener('visibilitychange', function (event) {\n      firstHiddenTime_1 = Math.min(firstHiddenTime_1, event.timeStamp);\n    }, {\n      once: true\n    });\n    po.observe({\n      type: 'paint',\n      buffered: true\n    });\n  } catch (e) {\n    fcpResolved = true;\n    possiblyEndSession();\n  }\n} //# sourceMappingURL=sdk.js.map","map":{"version":3,"sources":["C:/Users/Fernando Martinez/Documents/Programacion/SignWriter/Frontend JD/node_modules/@sentry/browser/esm/sdk.js"],"names":["getCurrentHub","initAndBind","Integrations","CoreIntegrations","getGlobalObject","SyncPromise","BrowserClient","wrap","internalWrap","Breadcrumbs","GlobalHandlers","LinkedErrors","TryCatch","UserAgent","defaultIntegrations","InboundFilters","FunctionToString","init","options","undefined","release","window_1","SENTRY_RELEASE","id","autoSessionTracking","startSessionTracking","showReportDialog","eventId","lastEventId","client","getClient","forceLoad","onLoad","callback","flush","timeout","reject","close","fn","window","hub","loadResolved","document","readyState","fcpResolved","possiblyEndSession","endSession","resolveWindowLoaded","removeEventListener","startSession","addEventListener","po","PerformanceObserver","entryList","getEntries","forEach","entry","name","startTime","firstHiddenTime_1","disconnect","visibilityState","Infinity","event","Math","min","timeStamp","once","observe","type","buffered","e"],"mappings":"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","sourcesContent":["import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { getGlobalObject, SyncPromise } from '@sentry/utils';\nimport { BrowserClient } from './client';\nimport { wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, GlobalHandlers, LinkedErrors, TryCatch, UserAgent } from './integrations';\nexport var defaultIntegrations = [\n    new CoreIntegrations.InboundFilters(),\n    new CoreIntegrations.FunctionToString(),\n    new TryCatch(),\n    new Breadcrumbs(),\n    new GlobalHandlers(),\n    new LinkedErrors(),\n    new UserAgent(),\n];\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options) {\n    if (options === void 0) { options = {}; }\n    if (options.defaultIntegrations === undefined) {\n        options.defaultIntegrations = defaultIntegrations;\n    }\n    if (options.release === undefined) {\n        var window_1 = getGlobalObject();\n        // This supports the variable that sentry-webpack-plugin injects\n        if (window_1.SENTRY_RELEASE && window_1.SENTRY_RELEASE.id) {\n            options.release = window_1.SENTRY_RELEASE.id;\n        }\n    }\n    if (options.autoSessionTracking === undefined) {\n        options.autoSessionTracking = false;\n    }\n    initAndBind(BrowserClient, options);\n    if (options.autoSessionTracking) {\n        startSessionTracking();\n    }\n}\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options) {\n    if (options === void 0) { options = {}; }\n    if (!options.eventId) {\n        options.eventId = getCurrentHub().lastEventId();\n    }\n    var client = getCurrentHub().getClient();\n    if (client) {\n        client.showReportDialog(options);\n    }\n}\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId() {\n    return getCurrentHub().lastEventId();\n}\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad() {\n    // Noop\n}\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback) {\n    callback();\n}\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function flush(timeout) {\n    var client = getCurrentHub().getClient();\n    if (client) {\n        return client.flush(timeout);\n    }\n    return SyncPromise.reject(false);\n}\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function close(timeout) {\n    var client = getCurrentHub().getClient();\n    if (client) {\n        return client.close(timeout);\n    }\n    return SyncPromise.reject(false);\n}\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrap(fn) {\n    return internalWrap(fn)();\n}\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking() {\n    var window = getGlobalObject();\n    var hub = getCurrentHub();\n    /**\n     * We should be using `Promise.all([windowLoaded, firstContentfulPaint])` here,\n     * but, as always, it's not available in the IE10-11. Thanks IE.\n     */\n    var loadResolved = document.readyState === 'complete';\n    var fcpResolved = false;\n    var possiblyEndSession = function () {\n        if (fcpResolved && loadResolved) {\n            hub.endSession();\n        }\n    };\n    var resolveWindowLoaded = function () {\n        loadResolved = true;\n        possiblyEndSession();\n        window.removeEventListener('load', resolveWindowLoaded);\n    };\n    hub.startSession();\n    if (!loadResolved) {\n        // IE doesn't support `{ once: true }` for event listeners, so we have to manually\n        // attach and then detach it once completed.\n        window.addEventListener('load', resolveWindowLoaded);\n    }\n    try {\n        var po = new PerformanceObserver(function (entryList, po) {\n            entryList.getEntries().forEach(function (entry) {\n                if (entry.name === 'first-contentful-paint' && entry.startTime < firstHiddenTime_1) {\n                    po.disconnect();\n                    fcpResolved = true;\n                    possiblyEndSession();\n                }\n            });\n        });\n        // There's no need to even attach this listener if `PerformanceObserver` constructor will fail,\n        // so we do it below here.\n        var firstHiddenTime_1 = document.visibilityState === 'hidden' ? 0 : Infinity;\n        document.addEventListener('visibilitychange', function (event) {\n            firstHiddenTime_1 = Math.min(firstHiddenTime_1, event.timeStamp);\n        }, { once: true });\n        po.observe({\n            type: 'paint',\n            buffered: true,\n        });\n    }\n    catch (e) {\n        fcpResolved = true;\n        possiblyEndSession();\n    }\n}\n//# sourceMappingURL=sdk.js.map"]},"metadata":{},"sourceType":"module"}
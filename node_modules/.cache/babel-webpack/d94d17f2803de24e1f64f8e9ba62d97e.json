{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { BaseBackend } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { supportsFetch } from '@sentry/utils';\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { FetchTransport, XHRTransport } from './transports';\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\n\nvar BrowserBackend =\n/** @class */\nfunction (_super) {\n  __extends(BrowserBackend, _super);\n\n  function BrowserBackend() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserBackend.prototype.eventFromException = function (exception, hint) {\n    return eventFromException(this._options, exception, hint);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserBackend.prototype.eventFromMessage = function (message, level, hint) {\n    if (level === void 0) {\n      level = Severity.Info;\n    }\n\n    return eventFromMessage(this._options, message, level, hint);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserBackend.prototype._setupTransport = function () {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return _super.prototype._setupTransport.call(this);\n    }\n\n    var transportOptions = __assign(__assign({}, this._options.transportOptions), {\n      dsn: this._options.dsn\n    });\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n\n    if (supportsFetch()) {\n      return new FetchTransport(transportOptions);\n    }\n\n    return new XHRTransport(transportOptions);\n  };\n\n  return BrowserBackend;\n}(BaseBackend);\n\nexport { BrowserBackend }; //# sourceMappingURL=backend.js.map","map":{"version":3,"sources":["C:/Users/Fernando Martinez/Documents/Programacion/SignWriter/Frontend JD/node_modules/@sentry/browser/esm/backend.js"],"names":["__assign","__extends","BaseBackend","Severity","supportsFetch","eventFromException","eventFromMessage","FetchTransport","XHRTransport","BrowserBackend","_super","apply","arguments","prototype","exception","hint","_options","message","level","Info","_setupTransport","dsn","call","transportOptions","transport"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,QAAqD,gBAArD;AACA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,cAA7C;AACA;AACA;AACA;AACA;;AACA,IAAIC,cAAc;AAAG;AAAe,UAAUC,MAAV,EAAkB;AAClDT,EAAAA,SAAS,CAACQ,cAAD,EAAiBC,MAAjB,CAAT;;AACA,WAASD,cAAT,GAA0B;AACtB,WAAOC,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAA3D;AACH;AACD;AACJ;AACA;;;AACIH,EAAAA,cAAc,CAACI,SAAf,CAAyBR,kBAAzB,GAA8C,UAAUS,SAAV,EAAqBC,IAArB,EAA2B;AACrE,WAAOV,kBAAkB,CAAC,KAAKW,QAAN,EAAgBF,SAAhB,EAA2BC,IAA3B,CAAzB;AACH,GAFD;AAGA;AACJ;AACA;;;AACIN,EAAAA,cAAc,CAACI,SAAf,CAAyBP,gBAAzB,GAA4C,UAAUW,OAAV,EAAmBC,KAAnB,EAA0BH,IAA1B,EAAgC;AACxE,QAAIG,KAAK,KAAK,KAAK,CAAnB,EAAsB;AAAEA,MAAAA,KAAK,GAAGf,QAAQ,CAACgB,IAAjB;AAAwB;;AAChD,WAAOb,gBAAgB,CAAC,KAAKU,QAAN,EAAgBC,OAAhB,EAAyBC,KAAzB,EAAgCH,IAAhC,CAAvB;AACH,GAHD;AAIA;AACJ;AACA;;;AACIN,EAAAA,cAAc,CAACI,SAAf,CAAyBO,eAAzB,GAA2C,YAAY;AACnD,QAAI,CAAC,KAAKJ,QAAL,CAAcK,GAAnB,EAAwB;AACpB;AACA,aAAOX,MAAM,CAACG,SAAP,CAAiBO,eAAjB,CAAiCE,IAAjC,CAAsC,IAAtC,CAAP;AACH;;AACD,QAAIC,gBAAgB,GAAGvB,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK,KAAKgB,QAAL,CAAcO,gBAAnB,CAAT,EAA+C;AAAEF,MAAAA,GAAG,EAAE,KAAKL,QAAL,CAAcK;AAArB,KAA/C,CAA/B;;AACA,QAAI,KAAKL,QAAL,CAAcQ,SAAlB,EAA6B;AACzB,aAAO,IAAI,KAAKR,QAAL,CAAcQ,SAAlB,CAA4BD,gBAA5B,CAAP;AACH;;AACD,QAAInB,aAAa,EAAjB,EAAqB;AACjB,aAAO,IAAIG,cAAJ,CAAmBgB,gBAAnB,CAAP;AACH;;AACD,WAAO,IAAIf,YAAJ,CAAiBe,gBAAjB,CAAP;AACH,GAbD;;AAcA,SAAOd,cAAP;AACH,CApCmC,CAoClCP,WApCkC,CAApC;;AAqCA,SAASO,cAAT,G,CACA","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { BaseBackend } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { supportsFetch } from '@sentry/utils';\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { FetchTransport, XHRTransport } from './transports';\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\nvar BrowserBackend = /** @class */ (function (_super) {\n    __extends(BrowserBackend, _super);\n    function BrowserBackend() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @inheritDoc\n     */\n    BrowserBackend.prototype.eventFromException = function (exception, hint) {\n        return eventFromException(this._options, exception, hint);\n    };\n    /**\n     * @inheritDoc\n     */\n    BrowserBackend.prototype.eventFromMessage = function (message, level, hint) {\n        if (level === void 0) { level = Severity.Info; }\n        return eventFromMessage(this._options, message, level, hint);\n    };\n    /**\n     * @inheritDoc\n     */\n    BrowserBackend.prototype._setupTransport = function () {\n        if (!this._options.dsn) {\n            // We return the noop transport here in case there is no Dsn.\n            return _super.prototype._setupTransport.call(this);\n        }\n        var transportOptions = __assign(__assign({}, this._options.transportOptions), { dsn: this._options.dsn });\n        if (this._options.transport) {\n            return new this._options.transport(transportOptions);\n        }\n        if (supportsFetch()) {\n            return new FetchTransport(transportOptions);\n        }\n        return new XHRTransport(transportOptions);\n    };\n    return BrowserBackend;\n}(BaseBackend));\nexport { BrowserBackend };\n//# sourceMappingURL=backend.js.map"]},"metadata":{},"sourceType":"module"}
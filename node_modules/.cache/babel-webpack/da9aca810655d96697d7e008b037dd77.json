{"ast":null,"code":"import { __rest } from \"tslib\";\n/** Creates a SentryRequest from an event. */\n\nexport function sessionToSentryRequest(session, api) {\n  var envelopeHeaders = JSON.stringify({\n    sent_at: new Date().toISOString()\n  });\n  var itemHeaders = JSON.stringify({\n    type: 'session'\n  });\n  return {\n    body: envelopeHeaders + \"\\n\" + itemHeaders + \"\\n\" + JSON.stringify(session),\n    type: 'session',\n    url: api.getEnvelopeEndpointWithUrlEncodedAuth()\n  };\n}\n/** Creates a SentryRequest from an event. */\n\nexport function eventToSentryRequest(event, api) {\n  // since JS has no Object.prototype.pop()\n  var _a = event.tags || {},\n      samplingMethod = _a.__sentry_samplingMethod,\n      sampleRate = _a.__sentry_sampleRate,\n      otherTags = __rest(_a, [\"__sentry_samplingMethod\", \"__sentry_sampleRate\"]);\n\n  event.tags = otherTags;\n  var useEnvelope = event.type === 'transaction';\n  var req = {\n    body: JSON.stringify(event),\n    type: event.type || 'event',\n    url: useEnvelope ? api.getEnvelopeEndpointWithUrlEncodedAuth() : api.getStoreEndpointWithUrlEncodedAuth()\n  }; // https://develop.sentry.dev/sdk/envelopes/\n  // Since we don't need to manipulate envelopes nor store them, there is no\n  // exported concept of an Envelope with operations including serialization and\n  // deserialization. Instead, we only implement a minimal subset of the spec to\n  // serialize events inline here.\n\n  if (useEnvelope) {\n    var envelopeHeaders = JSON.stringify({\n      event_id: event.event_id,\n      sent_at: new Date().toISOString()\n    });\n    var itemHeaders = JSON.stringify({\n      type: event.type,\n      // TODO: Right now, sampleRate may or may not be defined (it won't be in the cases of inheritance and\n      // explicitly-set sampling decisions). Are we good with that?\n      sample_rates: [{\n        id: samplingMethod,\n        rate: sampleRate\n      }]\n    }); // The trailing newline is optional. We intentionally don't send it to avoid\n    // sending unnecessary bytes.\n    //\n    // const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}\\n`;\n\n    var envelope = envelopeHeaders + \"\\n\" + itemHeaders + \"\\n\" + req.body;\n    req.body = envelope;\n  }\n\n  return req;\n} //# sourceMappingURL=request.js.map","map":{"version":3,"sources":["C:/Users/Fernando Martinez/Documents/Programacion/SignWriter/Frontend JD/node_modules/@sentry/core/esm/request.js"],"names":["__rest","sessionToSentryRequest","session","api","envelopeHeaders","JSON","stringify","sent_at","Date","toISOString","itemHeaders","type","body","url","getEnvelopeEndpointWithUrlEncodedAuth","eventToSentryRequest","event","_a","tags","samplingMethod","__sentry_samplingMethod","sampleRate","__sentry_sampleRate","otherTags","useEnvelope","req","getStoreEndpointWithUrlEncodedAuth","event_id","sample_rates","id","rate","envelope"],"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA;;AACA,OAAO,SAASC,sBAAT,CAAgCC,OAAhC,EAAyCC,GAAzC,EAA8C;AACjD,MAAIC,eAAe,GAAGC,IAAI,CAACC,SAAL,CAAe;AACjCC,IAAAA,OAAO,EAAE,IAAIC,IAAJ,GAAWC,WAAX;AADwB,GAAf,CAAtB;AAGA,MAAIC,WAAW,GAAGL,IAAI,CAACC,SAAL,CAAe;AAC7BK,IAAAA,IAAI,EAAE;AADuB,GAAf,CAAlB;AAGA,SAAO;AACHC,IAAAA,IAAI,EAAER,eAAe,GAAG,IAAlB,GAAyBM,WAAzB,GAAuC,IAAvC,GAA8CL,IAAI,CAACC,SAAL,CAAeJ,OAAf,CADjD;AAEHS,IAAAA,IAAI,EAAE,SAFH;AAGHE,IAAAA,GAAG,EAAEV,GAAG,CAACW,qCAAJ;AAHF,GAAP;AAKH;AACD;;AACA,OAAO,SAASC,oBAAT,CAA8BC,KAA9B,EAAqCb,GAArC,EAA0C;AAC7C;AACA,MAAIc,EAAE,GAAGD,KAAK,CAACE,IAAN,IAAc,EAAvB;AAAA,MAA2BC,cAAc,GAAGF,EAAE,CAACG,uBAA/C;AAAA,MAAwEC,UAAU,GAAGJ,EAAE,CAACK,mBAAxF;AAAA,MAA6GC,SAAS,GAAGvB,MAAM,CAACiB,EAAD,EAAK,CAAC,yBAAD,EAA4B,qBAA5B,CAAL,CAA/H;;AACAD,EAAAA,KAAK,CAACE,IAAN,GAAaK,SAAb;AACA,MAAIC,WAAW,GAAGR,KAAK,CAACL,IAAN,KAAe,aAAjC;AACA,MAAIc,GAAG,GAAG;AACNb,IAAAA,IAAI,EAAEP,IAAI,CAACC,SAAL,CAAeU,KAAf,CADA;AAENL,IAAAA,IAAI,EAAEK,KAAK,CAACL,IAAN,IAAc,OAFd;AAGNE,IAAAA,GAAG,EAAEW,WAAW,GAAGrB,GAAG,CAACW,qCAAJ,EAAH,GAAiDX,GAAG,CAACuB,kCAAJ;AAH3D,GAAV,CAL6C,CAU7C;AACA;AACA;AACA;AACA;;AACA,MAAIF,WAAJ,EAAiB;AACb,QAAIpB,eAAe,GAAGC,IAAI,CAACC,SAAL,CAAe;AACjCqB,MAAAA,QAAQ,EAAEX,KAAK,CAACW,QADiB;AAEjCpB,MAAAA,OAAO,EAAE,IAAIC,IAAJ,GAAWC,WAAX;AAFwB,KAAf,CAAtB;AAIA,QAAIC,WAAW,GAAGL,IAAI,CAACC,SAAL,CAAe;AAC7BK,MAAAA,IAAI,EAAEK,KAAK,CAACL,IADiB;AAE7B;AACA;AACAiB,MAAAA,YAAY,EAAE,CAAC;AAAEC,QAAAA,EAAE,EAAEV,cAAN;AAAsBW,QAAAA,IAAI,EAAET;AAA5B,OAAD;AAJe,KAAf,CAAlB,CALa,CAWb;AACA;AACA;AACA;;AACA,QAAIU,QAAQ,GAAG3B,eAAe,GAAG,IAAlB,GAAyBM,WAAzB,GAAuC,IAAvC,GAA8Ce,GAAG,CAACb,IAAjE;AACAa,IAAAA,GAAG,CAACb,IAAJ,GAAWmB,QAAX;AACH;;AACD,SAAON,GAAP;AACH,C,CACD","sourcesContent":["import { __rest } from \"tslib\";\n/** Creates a SentryRequest from an event. */\nexport function sessionToSentryRequest(session, api) {\n    var envelopeHeaders = JSON.stringify({\n        sent_at: new Date().toISOString(),\n    });\n    var itemHeaders = JSON.stringify({\n        type: 'session',\n    });\n    return {\n        body: envelopeHeaders + \"\\n\" + itemHeaders + \"\\n\" + JSON.stringify(session),\n        type: 'session',\n        url: api.getEnvelopeEndpointWithUrlEncodedAuth(),\n    };\n}\n/** Creates a SentryRequest from an event. */\nexport function eventToSentryRequest(event, api) {\n    // since JS has no Object.prototype.pop()\n    var _a = event.tags || {}, samplingMethod = _a.__sentry_samplingMethod, sampleRate = _a.__sentry_sampleRate, otherTags = __rest(_a, [\"__sentry_samplingMethod\", \"__sentry_sampleRate\"]);\n    event.tags = otherTags;\n    var useEnvelope = event.type === 'transaction';\n    var req = {\n        body: JSON.stringify(event),\n        type: event.type || 'event',\n        url: useEnvelope ? api.getEnvelopeEndpointWithUrlEncodedAuth() : api.getStoreEndpointWithUrlEncodedAuth(),\n    };\n    // https://develop.sentry.dev/sdk/envelopes/\n    // Since we don't need to manipulate envelopes nor store them, there is no\n    // exported concept of an Envelope with operations including serialization and\n    // deserialization. Instead, we only implement a minimal subset of the spec to\n    // serialize events inline here.\n    if (useEnvelope) {\n        var envelopeHeaders = JSON.stringify({\n            event_id: event.event_id,\n            sent_at: new Date().toISOString(),\n        });\n        var itemHeaders = JSON.stringify({\n            type: event.type,\n            // TODO: Right now, sampleRate may or may not be defined (it won't be in the cases of inheritance and\n            // explicitly-set sampling decisions). Are we good with that?\n            sample_rates: [{ id: samplingMethod, rate: sampleRate }],\n        });\n        // The trailing newline is optional. We intentionally don't send it to avoid\n        // sending unnecessary bytes.\n        //\n        // const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}\\n`;\n        var envelope = envelopeHeaders + \"\\n\" + itemHeaders + \"\\n\" + req.body;\n        req.body = envelope;\n    }\n    return req;\n}\n//# sourceMappingURL=request.js.map"]},"metadata":{},"sourceType":"module"}
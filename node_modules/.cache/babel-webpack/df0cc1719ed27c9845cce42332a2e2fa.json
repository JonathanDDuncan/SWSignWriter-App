{"ast":null,"code":"// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://raw.githubusercontent.com/calvinmetcalf/rollup-plugin-node-builtins/master/src/es6/path.js\n\n/** JSDoc */\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1); // eslint-disable-next-line no-plusplus\n\n      up++;\n    } else if (up) {\n      parts.splice(i, 1); // eslint-disable-next-line no-plusplus\n\n      up--;\n    }\n  } // if the path is allowed to go above the root, restore leading ..s\n\n\n  if (allowAboveRoot) {\n    // eslint-disable-next-line no-plusplus\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n} // Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\n\n\nvar splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^/]+?|)(\\.[^./]*|))(?:[/]*)$/;\n/** JSDoc */\n\nfunction splitPath(filename) {\n  var parts = splitPathRe.exec(filename);\n  return parts ? parts.slice(1) : [];\n} // path.resolve([from ...], to)\n// posix version\n\n/** JSDoc */\n\n\nexport function resolve() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var resolvedPath = '';\n  var resolvedAbsolute = false;\n\n  for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = i >= 0 ? args[i] : '/'; // Skip empty entries\n\n    if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + \"/\" + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  } // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n  // Normalize the path\n\n\n  resolvedPath = normalizeArray(resolvedPath.split('/').filter(function (p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n/** JSDoc */\n\nfunction trim(arr) {\n  var start = 0;\n\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n\n  var end = arr.length - 1;\n\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n\n  if (start > end) {\n    return [];\n  }\n\n  return arr.slice(start, end - start + 1);\n} // path.relative(from, to)\n// posix version\n\n/** JSDoc */\n\n\nexport function relative(from, to) {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).substr(1);\n  to = resolve(to).substr(1);\n  /* eslint-enable no-param-reassign */\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n  return outputParts.join('/');\n} // path.normalize(path)\n// posix version\n\n/** JSDoc */\n\nexport function normalizePath(path) {\n  var isPathAbsolute = isAbsolute(path);\n  var trailingSlash = path.substr(-1) === '/'; // Normalize the path\n\n  var normalizedPath = normalizeArray(path.split('/').filter(function (p) {\n    return !!p;\n  }), !isPathAbsolute).join('/');\n\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n} // posix version\n\n/** JSDoc */\n\nexport function isAbsolute(path) {\n  return path.charAt(0) === '/';\n} // posix version\n\n/** JSDoc */\n\nexport function join() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return normalizePath(args.join('/'));\n}\n/** JSDoc */\n\nexport function dirname(path) {\n  var result = splitPath(path);\n  var root = result[0];\n  var dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n/** JSDoc */\n\nexport function basename(path, ext) {\n  var f = splitPath(path)[2];\n\n  if (ext && f.substr(ext.length * -1) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n\n  return f;\n} //# sourceMappingURL=path.js.map","map":{"version":3,"sources":["C:/Users/Fernando Martinez/Documents/Programacion/SignWriter/Frontend JD/node_modules/@sentry/utils/esm/path.js"],"names":["normalizeArray","parts","allowAboveRoot","up","i","length","last","splice","unshift","splitPathRe","splitPath","filename","exec","slice","resolve","args","_i","arguments","resolvedPath","resolvedAbsolute","path","charAt","split","filter","p","join","trim","arr","start","end","relative","from","to","substr","fromParts","toParts","Math","min","samePartsLength","outputParts","push","concat","normalizePath","isPathAbsolute","isAbsolute","trailingSlash","normalizedPath","dirname","result","root","dir","basename","ext","f"],"mappings":"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","sourcesContent":["// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://raw.githubusercontent.com/calvinmetcalf/rollup-plugin-node-builtins/master/src/es6/path.js\n/** JSDoc */\nfunction normalizeArray(parts, allowAboveRoot) {\n    // if the path tries to go above the root, `up` ends up > 0\n    var up = 0;\n    for (var i = parts.length - 1; i >= 0; i--) {\n        var last = parts[i];\n        if (last === '.') {\n            parts.splice(i, 1);\n        }\n        else if (last === '..') {\n            parts.splice(i, 1);\n            // eslint-disable-next-line no-plusplus\n            up++;\n        }\n        else if (up) {\n            parts.splice(i, 1);\n            // eslint-disable-next-line no-plusplus\n            up--;\n        }\n    }\n    // if the path is allowed to go above the root, restore leading ..s\n    if (allowAboveRoot) {\n        // eslint-disable-next-line no-plusplus\n        for (; up--; up) {\n            parts.unshift('..');\n        }\n    }\n    return parts;\n}\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^/]+?|)(\\.[^./]*|))(?:[/]*)$/;\n/** JSDoc */\nfunction splitPath(filename) {\n    var parts = splitPathRe.exec(filename);\n    return parts ? parts.slice(1) : [];\n}\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nexport function resolve() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n        var path = i >= 0 ? args[i] : '/';\n        // Skip empty entries\n        if (!path) {\n            continue;\n        }\n        resolvedPath = path + \"/\" + resolvedPath;\n        resolvedAbsolute = path.charAt(0) === '/';\n    }\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n    // Normalize the path\n    resolvedPath = normalizeArray(resolvedPath.split('/').filter(function (p) { return !!p; }), !resolvedAbsolute).join('/');\n    return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n/** JSDoc */\nfunction trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n        if (arr[start] !== '') {\n            break;\n        }\n    }\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n        if (arr[end] !== '') {\n            break;\n        }\n    }\n    if (start > end) {\n        return [];\n    }\n    return arr.slice(start, end - start + 1);\n}\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nexport function relative(from, to) {\n    /* eslint-disable no-param-reassign */\n    from = resolve(from).substr(1);\n    to = resolve(to).substr(1);\n    /* eslint-enable no-param-reassign */\n    var fromParts = trim(from.split('/'));\n    var toParts = trim(to.split('/'));\n    var length = Math.min(fromParts.length, toParts.length);\n    var samePartsLength = length;\n    for (var i = 0; i < length; i++) {\n        if (fromParts[i] !== toParts[i]) {\n            samePartsLength = i;\n            break;\n        }\n    }\n    var outputParts = [];\n    for (var i = samePartsLength; i < fromParts.length; i++) {\n        outputParts.push('..');\n    }\n    outputParts = outputParts.concat(toParts.slice(samePartsLength));\n    return outputParts.join('/');\n}\n// path.normalize(path)\n// posix version\n/** JSDoc */\nexport function normalizePath(path) {\n    var isPathAbsolute = isAbsolute(path);\n    var trailingSlash = path.substr(-1) === '/';\n    // Normalize the path\n    var normalizedPath = normalizeArray(path.split('/').filter(function (p) { return !!p; }), !isPathAbsolute).join('/');\n    if (!normalizedPath && !isPathAbsolute) {\n        normalizedPath = '.';\n    }\n    if (normalizedPath && trailingSlash) {\n        normalizedPath += '/';\n    }\n    return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n// posix version\n/** JSDoc */\nexport function isAbsolute(path) {\n    return path.charAt(0) === '/';\n}\n// posix version\n/** JSDoc */\nexport function join() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return normalizePath(args.join('/'));\n}\n/** JSDoc */\nexport function dirname(path) {\n    var result = splitPath(path);\n    var root = result[0];\n    var dir = result[1];\n    if (!root && !dir) {\n        // No dirname whatsoever\n        return '.';\n    }\n    if (dir) {\n        // It has a dirname, strip trailing slash\n        dir = dir.substr(0, dir.length - 1);\n    }\n    return root + dir;\n}\n/** JSDoc */\nexport function basename(path, ext) {\n    var f = splitPath(path)[2];\n    if (ext && f.substr(ext.length * -1) === ext) {\n        f = f.substr(0, f.length - ext.length);\n    }\n    return f;\n}\n//# sourceMappingURL=path.js.map"]},"metadata":{},"sourceType":"module"}
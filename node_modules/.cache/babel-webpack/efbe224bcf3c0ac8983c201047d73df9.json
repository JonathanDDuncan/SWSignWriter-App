{"ast":null,"code":"import { __values } from \"tslib\";\nimport { htmlTreeAsString } from './browser';\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive, isSyntheticEvent } from './is';\nimport { Memo } from './memo';\nimport { getFunctionName } from './stacktrace';\nimport { truncate } from './string';\n/**\n * Wrap a given object method with a higher-order function\n *\n * @param source An object that contains a method to be wrapped.\n * @param name A name of method to be wrapped.\n * @param replacementFactory A function that should be used to wrap a given method, returning the wrapped method which\n * will be substituted in for `source[name]`.\n * @returns void\n */\n\nexport function fill(source, name, replacementFactory) {\n  if (!(name in source)) {\n    return;\n  }\n\n  var original = source[name];\n  var wrapped = replacementFactory(original); // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n\n  if (typeof wrapped === 'function') {\n    try {\n      wrapped.prototype = wrapped.prototype || {};\n      Object.defineProperties(wrapped, {\n        __sentry_original__: {\n          enumerable: false,\n          value: original\n        }\n      });\n    } catch (_Oo) {// This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n\n  source[name] = wrapped;\n}\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\n\nexport function urlEncode(object) {\n  return Object.keys(object).map(function (key) {\n    return encodeURIComponent(key) + \"=\" + encodeURIComponent(object[key]);\n  }).join('&');\n}\n/**\n * Transforms any object into an object literal with all its attributes\n * attached to it.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n */\n\nfunction getWalkSource(value) {\n  if (isError(value)) {\n    var error = value;\n    var err = {\n      message: error.message,\n      name: error.name,\n      stack: error.stack\n    };\n\n    for (var i in error) {\n      if (Object.prototype.hasOwnProperty.call(error, i)) {\n        err[i] = error[i];\n      }\n    }\n\n    return err;\n  }\n\n  if (isEvent(value)) {\n    var event_1 = value;\n    var source = {};\n    source.type = event_1.type; // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n\n    try {\n      source.target = isElement(event_1.target) ? htmlTreeAsString(event_1.target) : Object.prototype.toString.call(event_1.target);\n    } catch (_oO) {\n      source.target = '<unknown>';\n    }\n\n    try {\n      source.currentTarget = isElement(event_1.currentTarget) ? htmlTreeAsString(event_1.currentTarget) : Object.prototype.toString.call(event_1.currentTarget);\n    } catch (_oO) {\n      source.currentTarget = '<unknown>';\n    }\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      source.detail = event_1.detail;\n    }\n\n    for (var i in event_1) {\n      if (Object.prototype.hasOwnProperty.call(event_1, i)) {\n        source[i] = event_1;\n      }\n    }\n\n    return source;\n  }\n\n  return value;\n}\n/** Calculates bytes size of input string */\n\n\nfunction utf8Length(value) {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n/** Calculates bytes size of input object */\n\n\nfunction jsonSize(value) {\n  return utf8Length(JSON.stringify(value));\n}\n/** JSDoc */\n\n\nexport function normalizeToSize(object, // Default Node.js REPL depth\ndepth, // 100kB, as 200kB is max payload size, so half sounds reasonable\nmaxSize) {\n  if (depth === void 0) {\n    depth = 3;\n  }\n\n  if (maxSize === void 0) {\n    maxSize = 100 * 1024;\n  }\n\n  var serialized = normalize(object, depth);\n\n  if (jsonSize(serialized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return serialized;\n}\n/**\n * Transform any non-primitive, BigInt, or Symbol-type value into a string. Acts as a no-op on strings, numbers,\n * booleans, null, and undefined.\n *\n * @param value The value to stringify\n * @returns For non-primitive, BigInt, and Symbol-type values, a string denoting the value's type, type and value, or\n *  type and `description` property, respectively. For non-BigInt, non-Symbol primitives, returns the original value,\n *  unchanged.\n */\n\nfunction serializeValue(value) {\n  var type = Object.prototype.toString.call(value); // Node.js REPL notation\n\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  if (type === '[object Object]') {\n    return '[Object]';\n  }\n\n  if (type === '[object Array]') {\n    return '[Array]';\n  }\n\n  var normalized = normalizeValue(value);\n  return isPrimitive(normalized) ? normalized : type;\n}\n/**\n * normalizeValue()\n *\n * Takes unserializable input and make it serializable friendly\n *\n * - translates undefined/NaN values to \"[undefined]\"/\"[NaN]\" respectively,\n * - serializes Error objects\n * - filter global objects\n */\n\n\nfunction normalizeValue(value, key) {\n  if (key === 'domain' && value && typeof value === 'object' && value._events) {\n    return '[Domain]';\n  }\n\n  if (key === 'domainEmitter') {\n    return '[DomainEmitter]';\n  }\n\n  if (typeof global !== 'undefined' && value === global) {\n    return '[Global]';\n  }\n\n  if (typeof window !== 'undefined' && value === window) {\n    return '[Window]';\n  }\n\n  if (typeof document !== 'undefined' && value === document) {\n    return '[Document]';\n  } // React's SyntheticEvent thingy\n\n\n  if (isSyntheticEvent(value)) {\n    return '[SyntheticEvent]';\n  }\n\n  if (typeof value === 'number' && value !== value) {\n    return '[NaN]';\n  }\n\n  if (value === void 0) {\n    return '[undefined]';\n  }\n\n  if (typeof value === 'function') {\n    return \"[Function: \" + getFunctionName(value) + \"]\";\n  } // symbols and bigints are considered primitives by TS, but aren't natively JSON-serilaizable\n\n\n  if (typeof value === 'symbol') {\n    return \"[\" + String(value) + \"]\";\n  }\n\n  if (typeof value === 'bigint') {\n    return \"[BigInt: \" + String(value) + \"]\";\n  }\n\n  return value;\n}\n/**\n * Walks an object to perform a normalization on it\n *\n * @param key of object that's walked in current iteration\n * @param value object to be walked\n * @param depth Optional number indicating how deep should walking be performed\n * @param memo Optional Memo class handling decycling\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n\nexport function walk(key, value, depth, memo) {\n  if (depth === void 0) {\n    depth = +Infinity;\n  }\n\n  if (memo === void 0) {\n    memo = new Memo();\n  } // If we reach the maximum depth, serialize whatever has left\n\n\n  if (depth === 0) {\n    return serializeValue(value);\n  }\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // If value implements `toJSON` method, call it and return early\n\n\n  if (value !== null && value !== undefined && typeof value.toJSON === 'function') {\n    return value.toJSON();\n  }\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  // If normalized value is a primitive, there are no branches left to walk, so we can just bail out, as theres no point in going down that branch any further\n\n\n  var normalized = normalizeValue(value, key);\n\n  if (isPrimitive(normalized)) {\n    return normalized;\n  } // Create source that we will use for next itterations, either objectified error object (Error type with extracted keys:value pairs) or the input itself\n\n\n  var source = getWalkSource(value); // Create an accumulator that will act as a parent for all future itterations of that branch\n\n  var acc = Array.isArray(value) ? [] : {}; // If we already walked that branch, bail out, as it's circular reference\n\n  if (memo.memoize(value)) {\n    return '[Circular ~]';\n  } // Walk all keys of the source\n\n\n  for (var innerKey in source) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(source, innerKey)) {\n      continue;\n    } // Recursively walk through all the child nodes\n\n\n    acc[innerKey] = walk(innerKey, source[innerKey], depth - 1, memo);\n  } // Once walked through all the branches, remove the parent from memo storage\n\n\n  memo.unmemoize(value); // Return accumulated values\n\n  return acc;\n}\n/**\n * normalize()\n *\n * - Creates a copy to prevent original input mutation\n * - Skip non-enumerablers\n * - Calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializeable values (undefined/NaN/Functions) to serializable format\n * - Translates known global objects/Classes to a string representations\n * - Takes care of Error objects serialization\n * - Optionally limit depth of final output\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nexport function normalize(input, depth) {\n  try {\n    return JSON.parse(JSON.stringify(input, function (key, value) {\n      return walk(key, value, depth);\n    }));\n  } catch (_oO) {\n    return '**non-serializable**';\n  }\n}\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nexport function extractExceptionKeysForMessage(exception, maxLength) {\n  if (maxLength === void 0) {\n    maxLength = 40;\n  }\n\n  var keys = Object.keys(getWalkSource(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (var includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    var serialized = keys.slice(0, includedKeys).join(', ');\n\n    if (serialized.length > maxLength) {\n      continue;\n    }\n\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n/**\n * Given any object, return the new object with removed keys that value was `undefined`.\n * Works recursively on objects and arrays.\n */\n\nexport function dropUndefinedKeys(val) {\n  var e_1, _a;\n\n  if (isPlainObject(val)) {\n    var obj = val;\n    var rv = {};\n\n    try {\n      for (var _b = __values(Object.keys(obj)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var key = _c.value;\n\n        if (typeof obj[key] !== 'undefined') {\n          rv[key] = dropUndefinedKeys(obj[key]);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return rv;\n  }\n\n  if (Array.isArray(val)) {\n    return val.map(dropUndefinedKeys);\n  }\n\n  return val;\n} //# sourceMappingURL=object.js.map","map":{"version":3,"sources":["C:/Users/Fernando Martinez/Documents/Programacion/SignWriter/Frontend JD/node_modules/@sentry/utils/esm/object.js"],"names":["__values","htmlTreeAsString","isElement","isError","isEvent","isInstanceOf","isPlainObject","isPrimitive","isSyntheticEvent","Memo","getFunctionName","truncate","fill","source","name","replacementFactory","original","wrapped","prototype","Object","defineProperties","__sentry_original__","enumerable","value","_Oo","urlEncode","object","keys","map","key","encodeURIComponent","join","getWalkSource","error","err","message","stack","i","hasOwnProperty","call","event_1","type","target","toString","_oO","currentTarget","CustomEvent","detail","utf8Length","encodeURI","split","length","jsonSize","JSON","stringify","normalizeToSize","depth","maxSize","serialized","normalize","serializeValue","normalized","normalizeValue","_events","global","window","document","String","walk","memo","Infinity","undefined","toJSON","acc","Array","isArray","memoize","innerKey","unmemoize","input","parse","extractExceptionKeysForMessage","exception","maxLength","sort","includedKeys","slice","dropUndefinedKeys","val","e_1","_a","obj","rv","_b","_c","next","done","e_1_1","return"],"mappings":"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","sourcesContent":["import { __values } from \"tslib\";\nimport { htmlTreeAsString } from './browser';\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive, isSyntheticEvent } from './is';\nimport { Memo } from './memo';\nimport { getFunctionName } from './stacktrace';\nimport { truncate } from './string';\n/**\n * Wrap a given object method with a higher-order function\n *\n * @param source An object that contains a method to be wrapped.\n * @param name A name of method to be wrapped.\n * @param replacementFactory A function that should be used to wrap a given method, returning the wrapped method which\n * will be substituted in for `source[name]`.\n * @returns void\n */\nexport function fill(source, name, replacementFactory) {\n    if (!(name in source)) {\n        return;\n    }\n    var original = source[name];\n    var wrapped = replacementFactory(original);\n    // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n    // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n    if (typeof wrapped === 'function') {\n        try {\n            wrapped.prototype = wrapped.prototype || {};\n            Object.defineProperties(wrapped, {\n                __sentry_original__: {\n                    enumerable: false,\n                    value: original,\n                },\n            });\n        }\n        catch (_Oo) {\n            // This can throw if multiple fill happens on a global object like XMLHttpRequest\n            // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n        }\n    }\n    source[name] = wrapped;\n}\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object) {\n    return Object.keys(object)\n        .map(function (key) { return encodeURIComponent(key) + \"=\" + encodeURIComponent(object[key]); })\n        .join('&');\n}\n/**\n * Transforms any object into an object literal with all its attributes\n * attached to it.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n */\nfunction getWalkSource(value) {\n    if (isError(value)) {\n        var error = value;\n        var err = {\n            message: error.message,\n            name: error.name,\n            stack: error.stack,\n        };\n        for (var i in error) {\n            if (Object.prototype.hasOwnProperty.call(error, i)) {\n                err[i] = error[i];\n            }\n        }\n        return err;\n    }\n    if (isEvent(value)) {\n        var event_1 = value;\n        var source = {};\n        source.type = event_1.type;\n        // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n        try {\n            source.target = isElement(event_1.target)\n                ? htmlTreeAsString(event_1.target)\n                : Object.prototype.toString.call(event_1.target);\n        }\n        catch (_oO) {\n            source.target = '<unknown>';\n        }\n        try {\n            source.currentTarget = isElement(event_1.currentTarget)\n                ? htmlTreeAsString(event_1.currentTarget)\n                : Object.prototype.toString.call(event_1.currentTarget);\n        }\n        catch (_oO) {\n            source.currentTarget = '<unknown>';\n        }\n        if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n            source.detail = event_1.detail;\n        }\n        for (var i in event_1) {\n            if (Object.prototype.hasOwnProperty.call(event_1, i)) {\n                source[i] = event_1;\n            }\n        }\n        return source;\n    }\n    return value;\n}\n/** Calculates bytes size of input string */\nfunction utf8Length(value) {\n    // eslint-disable-next-line no-bitwise\n    return ~-encodeURI(value).split(/%..|./).length;\n}\n/** Calculates bytes size of input object */\nfunction jsonSize(value) {\n    return utf8Length(JSON.stringify(value));\n}\n/** JSDoc */\nexport function normalizeToSize(object, \n// Default Node.js REPL depth\ndepth, \n// 100kB, as 200kB is max payload size, so half sounds reasonable\nmaxSize) {\n    if (depth === void 0) { depth = 3; }\n    if (maxSize === void 0) { maxSize = 100 * 1024; }\n    var serialized = normalize(object, depth);\n    if (jsonSize(serialized) > maxSize) {\n        return normalizeToSize(object, depth - 1, maxSize);\n    }\n    return serialized;\n}\n/**\n * Transform any non-primitive, BigInt, or Symbol-type value into a string. Acts as a no-op on strings, numbers,\n * booleans, null, and undefined.\n *\n * @param value The value to stringify\n * @returns For non-primitive, BigInt, and Symbol-type values, a string denoting the value's type, type and value, or\n *  type and `description` property, respectively. For non-BigInt, non-Symbol primitives, returns the original value,\n *  unchanged.\n */\nfunction serializeValue(value) {\n    var type = Object.prototype.toString.call(value);\n    // Node.js REPL notation\n    if (typeof value === 'string') {\n        return value;\n    }\n    if (type === '[object Object]') {\n        return '[Object]';\n    }\n    if (type === '[object Array]') {\n        return '[Array]';\n    }\n    var normalized = normalizeValue(value);\n    return isPrimitive(normalized) ? normalized : type;\n}\n/**\n * normalizeValue()\n *\n * Takes unserializable input and make it serializable friendly\n *\n * - translates undefined/NaN values to \"[undefined]\"/\"[NaN]\" respectively,\n * - serializes Error objects\n * - filter global objects\n */\nfunction normalizeValue(value, key) {\n    if (key === 'domain' && value && typeof value === 'object' && value._events) {\n        return '[Domain]';\n    }\n    if (key === 'domainEmitter') {\n        return '[DomainEmitter]';\n    }\n    if (typeof global !== 'undefined' && value === global) {\n        return '[Global]';\n    }\n    if (typeof window !== 'undefined' && value === window) {\n        return '[Window]';\n    }\n    if (typeof document !== 'undefined' && value === document) {\n        return '[Document]';\n    }\n    // React's SyntheticEvent thingy\n    if (isSyntheticEvent(value)) {\n        return '[SyntheticEvent]';\n    }\n    if (typeof value === 'number' && value !== value) {\n        return '[NaN]';\n    }\n    if (value === void 0) {\n        return '[undefined]';\n    }\n    if (typeof value === 'function') {\n        return \"[Function: \" + getFunctionName(value) + \"]\";\n    }\n    // symbols and bigints are considered primitives by TS, but aren't natively JSON-serilaizable\n    if (typeof value === 'symbol') {\n        return \"[\" + String(value) + \"]\";\n    }\n    if (typeof value === 'bigint') {\n        return \"[BigInt: \" + String(value) + \"]\";\n    }\n    return value;\n}\n/**\n * Walks an object to perform a normalization on it\n *\n * @param key of object that's walked in current iteration\n * @param value object to be walked\n * @param depth Optional number indicating how deep should walking be performed\n * @param memo Optional Memo class handling decycling\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function walk(key, value, depth, memo) {\n    if (depth === void 0) { depth = +Infinity; }\n    if (memo === void 0) { memo = new Memo(); }\n    // If we reach the maximum depth, serialize whatever has left\n    if (depth === 0) {\n        return serializeValue(value);\n    }\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n    // If value implements `toJSON` method, call it and return early\n    if (value !== null && value !== undefined && typeof value.toJSON === 'function') {\n        return value.toJSON();\n    }\n    /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n    // If normalized value is a primitive, there are no branches left to walk, so we can just bail out, as theres no point in going down that branch any further\n    var normalized = normalizeValue(value, key);\n    if (isPrimitive(normalized)) {\n        return normalized;\n    }\n    // Create source that we will use for next itterations, either objectified error object (Error type with extracted keys:value pairs) or the input itself\n    var source = getWalkSource(value);\n    // Create an accumulator that will act as a parent for all future itterations of that branch\n    var acc = Array.isArray(value) ? [] : {};\n    // If we already walked that branch, bail out, as it's circular reference\n    if (memo.memoize(value)) {\n        return '[Circular ~]';\n    }\n    // Walk all keys of the source\n    for (var innerKey in source) {\n        // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n        if (!Object.prototype.hasOwnProperty.call(source, innerKey)) {\n            continue;\n        }\n        // Recursively walk through all the child nodes\n        acc[innerKey] = walk(innerKey, source[innerKey], depth - 1, memo);\n    }\n    // Once walked through all the branches, remove the parent from memo storage\n    memo.unmemoize(value);\n    // Return accumulated values\n    return acc;\n}\n/**\n * normalize()\n *\n * - Creates a copy to prevent original input mutation\n * - Skip non-enumerablers\n * - Calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializeable values (undefined/NaN/Functions) to serializable format\n * - Translates known global objects/Classes to a string representations\n * - Takes care of Error objects serialization\n * - Optionally limit depth of final output\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function normalize(input, depth) {\n    try {\n        return JSON.parse(JSON.stringify(input, function (key, value) { return walk(key, value, depth); }));\n    }\n    catch (_oO) {\n        return '**non-serializable**';\n    }\n}\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function extractExceptionKeysForMessage(exception, maxLength) {\n    if (maxLength === void 0) { maxLength = 40; }\n    var keys = Object.keys(getWalkSource(exception));\n    keys.sort();\n    if (!keys.length) {\n        return '[object has no keys]';\n    }\n    if (keys[0].length >= maxLength) {\n        return truncate(keys[0], maxLength);\n    }\n    for (var includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n        var serialized = keys.slice(0, includedKeys).join(', ');\n        if (serialized.length > maxLength) {\n            continue;\n        }\n        if (includedKeys === keys.length) {\n            return serialized;\n        }\n        return truncate(serialized, maxLength);\n    }\n    return '';\n}\n/**\n * Given any object, return the new object with removed keys that value was `undefined`.\n * Works recursively on objects and arrays.\n */\nexport function dropUndefinedKeys(val) {\n    var e_1, _a;\n    if (isPlainObject(val)) {\n        var obj = val;\n        var rv = {};\n        try {\n            for (var _b = __values(Object.keys(obj)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var key = _c.value;\n                if (typeof obj[key] !== 'undefined') {\n                    rv[key] = dropUndefinedKeys(obj[key]);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return rv;\n    }\n    if (Array.isArray(val)) {\n        return val.map(dropUndefinedKeys);\n    }\n    return val;\n}\n//# sourceMappingURL=object.js.map"]},"metadata":{},"sourceType":"module"}
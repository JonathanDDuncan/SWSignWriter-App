{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { isInstanceOf } from '@sentry/utils';\nimport { exceptionFromStacktrace } from '../parsers';\nimport { computeStackTrace } from '../tracekit';\nvar DEFAULT_KEY = 'cause';\nvar DEFAULT_LIMIT = 5;\n/** Adds SDK info to an event. */\n\nvar LinkedErrors =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function LinkedErrors(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = LinkedErrors.id;\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  LinkedErrors.prototype.setupOnce = function () {\n    addGlobalEventProcessor(function (event, hint) {\n      var self = getCurrentHub().getIntegration(LinkedErrors);\n\n      if (self) {\n        return self._handler(event, hint);\n      }\n\n      return event;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LinkedErrors.prototype._handler = function (event, hint) {\n    if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n      return event;\n    }\n\n    var linkedErrors = this._walkErrorTree(hint.originalException, this._key);\n\n    event.exception.values = __spread(linkedErrors, event.exception.values);\n    return event;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LinkedErrors.prototype._walkErrorTree = function (error, key, stack) {\n    if (stack === void 0) {\n      stack = [];\n    }\n\n    if (!isInstanceOf(error[key], Error) || stack.length + 1 >= this._limit) {\n      return stack;\n    }\n\n    var stacktrace = computeStackTrace(error[key]);\n    var exception = exceptionFromStacktrace(stacktrace);\n    return this._walkErrorTree(error[key], key, __spread([exception], stack));\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LinkedErrors.id = 'LinkedErrors';\n  return LinkedErrors;\n}();\n\nexport { LinkedErrors }; //# sourceMappingURL=linkederrors.js.map","map":{"version":3,"sources":["C:/Users/Fernando Martinez/Documents/Programacion/SignWriter/Frontend JD/node_modules/@sentry/browser/esm/integrations/linkederrors.js"],"names":["__read","__spread","addGlobalEventProcessor","getCurrentHub","isInstanceOf","exceptionFromStacktrace","computeStackTrace","DEFAULT_KEY","DEFAULT_LIMIT","LinkedErrors","options","name","id","_key","key","_limit","limit","prototype","setupOnce","event","hint","self","getIntegration","_handler","exception","values","originalException","Error","linkedErrors","_walkErrorTree","error","stack","length","stacktrace"],"mappings":"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","sourcesContent":["import { __read, __spread } from \"tslib\";\nimport { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { isInstanceOf } from '@sentry/utils';\nimport { exceptionFromStacktrace } from '../parsers';\nimport { computeStackTrace } from '../tracekit';\nvar DEFAULT_KEY = 'cause';\nvar DEFAULT_LIMIT = 5;\n/** Adds SDK info to an event. */\nvar LinkedErrors = /** @class */ (function () {\n    /**\n     * @inheritDoc\n     */\n    function LinkedErrors(options) {\n        if (options === void 0) { options = {}; }\n        /**\n         * @inheritDoc\n         */\n        this.name = LinkedErrors.id;\n        this._key = options.key || DEFAULT_KEY;\n        this._limit = options.limit || DEFAULT_LIMIT;\n    }\n    /**\n     * @inheritDoc\n     */\n    LinkedErrors.prototype.setupOnce = function () {\n        addGlobalEventProcessor(function (event, hint) {\n            var self = getCurrentHub().getIntegration(LinkedErrors);\n            if (self) {\n                return self._handler(event, hint);\n            }\n            return event;\n        });\n    };\n    /**\n     * @inheritDoc\n     */\n    LinkedErrors.prototype._handler = function (event, hint) {\n        if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n            return event;\n        }\n        var linkedErrors = this._walkErrorTree(hint.originalException, this._key);\n        event.exception.values = __spread(linkedErrors, event.exception.values);\n        return event;\n    };\n    /**\n     * @inheritDoc\n     */\n    LinkedErrors.prototype._walkErrorTree = function (error, key, stack) {\n        if (stack === void 0) { stack = []; }\n        if (!isInstanceOf(error[key], Error) || stack.length + 1 >= this._limit) {\n            return stack;\n        }\n        var stacktrace = computeStackTrace(error[key]);\n        var exception = exceptionFromStacktrace(stacktrace);\n        return this._walkErrorTree(error[key], key, __spread([exception], stack));\n    };\n    /**\n     * @inheritDoc\n     */\n    LinkedErrors.id = 'LinkedErrors';\n    return LinkedErrors;\n}());\nexport { LinkedErrors };\n//# sourceMappingURL=linkederrors.js.map"]},"metadata":{},"sourceType":"module"}